{"ast":null,"code":"import _asyncToGenerator from \"/Users/uerceg/GitHub/cordova_sdk_dev/example-ionic-capacitor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-b3eecb14.js';\nimport { r as reorderThreeOutline, h as reorderTwoSharp } from './index-e3f61316.js';\nimport { b as getIonMode } from './ionic-global-0ebe321c.js';\nimport { c as componentOnReady } from './helpers-6e1e5b65.js';\nimport { a as hapticSelectionStart, b as hapticSelectionChanged, h as hapticSelectionEnd } from './haptic-9a9aa7ec.js';\nconst reorderIosCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:34px;opacity:0.4}\";\nconst reorderMdCss = \":host([slot]){display:none;line-height:0;z-index:100}.reorder-icon{display:block;font-size:22px}.reorder-icon{font-size:31px;opacity:0.3}\";\nconst Reorder = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n  }\n\n  onClick(ev) {\n    const reorderGroup = this.el.closest('ion-reorder-group');\n    ev.preventDefault(); // Only stop event propagation if the reorder is inside of an enabled\n    // reorder group. This allows interaction with clickable children components.\n\n    if (!reorderGroup || !reorderGroup.disabled) {\n      ev.stopImmediatePropagation();\n    }\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    const reorderIcon = mode === 'ios' ? reorderThreeOutline : reorderTwoSharp;\n    return h(Host, {\n      class: mode\n    }, h(\"slot\", null, h(\"ion-icon\", {\n      icon: reorderIcon,\n      lazy: false,\n      class: \"reorder-icon\",\n      part: \"icon\"\n    })));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nReorder.style = {\n  ios: reorderIosCss,\n  md: reorderMdCss\n};\nconst reorderGroupCss = \".reorder-list-active>*{-webkit-transition:-webkit-transform 300ms;transition:-webkit-transform 300ms;transition:transform 300ms;transition:transform 300ms, -webkit-transform 300ms;will-change:transform}.reorder-enabled{-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}.reorder-enabled ion-reorder{display:block;cursor:-webkit-grab;cursor:grab;pointer-events:all;-ms-touch-action:none;touch-action:none}.reorder-selected,.reorder-selected ion-reorder{cursor:-webkit-grabbing;cursor:grabbing}.reorder-selected{position:relative;-webkit-transition:none !important;transition:none !important;-webkit-box-shadow:0 0 10px rgba(0, 0, 0, 0.4);box-shadow:0 0 10px rgba(0, 0, 0, 0.4);opacity:0.8;z-index:100}.reorder-visible ion-reorder .reorder-icon{-webkit-transform:translate3d(0,  0,  0);transform:translate3d(0,  0,  0)}\";\nconst ReorderGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionItemReorder = createEvent(this, \"ionItemReorder\", 7);\n    this.lastToIndex = -1;\n    this.cachedHeights = [];\n    this.scrollElTop = 0;\n    this.scrollElBottom = 0;\n    this.scrollElInitial = 0;\n    this.containerTop = 0;\n    this.containerBottom = 0;\n    this.state = 0\n    /* Idle */\n    ;\n    /**\n     * If `true`, the reorder will be hidden.\n     */\n\n    this.disabled = true;\n  }\n\n  disabledChanged() {\n    if (this.gesture) {\n      this.gesture.enable(!this.disabled);\n    }\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const contentEl = _this.el.closest('ion-content');\n\n      if (contentEl) {\n        yield new Promise(resolve => componentOnReady(contentEl, resolve));\n        _this.scrollEl = yield contentEl.getScrollElement();\n      }\n\n      _this.gesture = (yield import('./index-41bf41f2.js')).createGesture({\n        el: _this.el,\n        gestureName: 'reorder',\n        gesturePriority: 110,\n        threshold: 0,\n        direction: 'y',\n        passive: false,\n        canStart: detail => _this.canStart(detail),\n        onStart: ev => _this.onStart(ev),\n        onMove: ev => _this.onMove(ev),\n        onEnd: () => _this.onEnd()\n      });\n\n      _this.disabledChanged();\n    })();\n  }\n\n  disconnectedCallback() {\n    this.onEnd();\n\n    if (this.gesture) {\n      this.gesture.destroy();\n      this.gesture = undefined;\n    }\n  }\n  /**\n   * Completes the reorder operation. Must be called by the `ionItemReorder` event.\n   *\n   * If a list of items is passed, the list will be reordered and returned in the\n   * proper order.\n   *\n   * If no parameters are passed or if `true` is passed in, the reorder will complete\n   * and the item will remain in the position it was dragged to. If `false` is passed,\n   * the reorder will complete and the item will bounce back to its original position.\n   *\n   * @param listOrReorder A list of items to be sorted and returned in the new order or a\n   * boolean of whether or not the reorder should reposition the item.\n   */\n\n\n  complete(listOrReorder) {\n    return Promise.resolve(this.completeSync(listOrReorder));\n  }\n\n  canStart(ev) {\n    if (this.selectedItemEl || this.state !== 0\n    /* Idle */\n    ) {\n      return false;\n    }\n\n    const target = ev.event.target;\n    const reorderEl = target.closest('ion-reorder');\n\n    if (!reorderEl) {\n      return false;\n    }\n\n    const item = findReorderItem(reorderEl, this.el);\n\n    if (!item) {\n      return false;\n    }\n\n    ev.data = item;\n    return true;\n  }\n\n  onStart(ev) {\n    ev.event.preventDefault();\n    const item = this.selectedItemEl = ev.data;\n    const heights = this.cachedHeights;\n    heights.length = 0;\n    const el = this.el;\n    const children = el.children;\n\n    if (!children || children.length === 0) {\n      return;\n    }\n\n    let sum = 0;\n\n    for (let i = 0; i < children.length; i++) {\n      const child = children[i];\n      sum += child.offsetHeight;\n      heights.push(sum);\n      child.$ionIndex = i;\n    }\n\n    const box = el.getBoundingClientRect();\n    this.containerTop = box.top;\n    this.containerBottom = box.bottom;\n\n    if (this.scrollEl) {\n      const scrollBox = this.scrollEl.getBoundingClientRect();\n      this.scrollElInitial = this.scrollEl.scrollTop;\n      this.scrollElTop = scrollBox.top + AUTO_SCROLL_MARGIN;\n      this.scrollElBottom = scrollBox.bottom - AUTO_SCROLL_MARGIN;\n    } else {\n      this.scrollElInitial = 0;\n      this.scrollElTop = 0;\n      this.scrollElBottom = 0;\n    }\n\n    this.lastToIndex = indexForItem(item);\n    this.selectedItemHeight = item.offsetHeight;\n    this.state = 1\n    /* Active */\n    ;\n    item.classList.add(ITEM_REORDER_SELECTED);\n    hapticSelectionStart();\n  }\n\n  onMove(ev) {\n    const selectedItem = this.selectedItemEl;\n\n    if (!selectedItem) {\n      return;\n    } // Scroll if we reach the scroll margins\n\n\n    const scroll = this.autoscroll(ev.currentY); // // Get coordinate\n\n    const top = this.containerTop - scroll;\n    const bottom = this.containerBottom - scroll;\n    const currentY = Math.max(top, Math.min(ev.currentY, bottom));\n    const deltaY = scroll + currentY - ev.startY;\n    const normalizedY = currentY - top;\n    const toIndex = this.itemIndexForTop(normalizedY);\n\n    if (toIndex !== this.lastToIndex) {\n      const fromIndex = indexForItem(selectedItem);\n      this.lastToIndex = toIndex;\n      hapticSelectionChanged();\n      this.reorderMove(fromIndex, toIndex);\n    } // Update selected item position\n\n\n    selectedItem.style.transform = `translateY(${deltaY}px)`;\n  }\n\n  onEnd() {\n    const selectedItemEl = this.selectedItemEl;\n    this.state = 2\n    /* Complete */\n    ;\n\n    if (!selectedItemEl) {\n      this.state = 0\n      /* Idle */\n      ;\n      return;\n    }\n\n    const toIndex = this.lastToIndex;\n    const fromIndex = indexForItem(selectedItemEl);\n\n    if (toIndex === fromIndex) {\n      this.completeSync();\n    } else {\n      this.ionItemReorder.emit({\n        from: fromIndex,\n        to: toIndex,\n        complete: this.completeSync.bind(this)\n      });\n    }\n\n    hapticSelectionEnd();\n  }\n\n  completeSync(listOrReorder) {\n    const selectedItemEl = this.selectedItemEl;\n\n    if (selectedItemEl && this.state === 2\n    /* Complete */\n    ) {\n      const children = this.el.children;\n      const len = children.length;\n      const toIndex = this.lastToIndex;\n      const fromIndex = indexForItem(selectedItemEl);\n\n      if (toIndex !== fromIndex && (listOrReorder === undefined || listOrReorder === true)) {\n        const ref = fromIndex < toIndex ? children[toIndex + 1] : children[toIndex];\n        this.el.insertBefore(selectedItemEl, ref);\n      }\n\n      if (Array.isArray(listOrReorder)) {\n        listOrReorder = reorderArray(listOrReorder, fromIndex, toIndex);\n      }\n\n      for (let i = 0; i < len; i++) {\n        children[i].style['transform'] = '';\n      }\n\n      selectedItemEl.style.transition = '';\n      selectedItemEl.classList.remove(ITEM_REORDER_SELECTED);\n      this.selectedItemEl = undefined;\n      this.state = 0\n      /* Idle */\n      ;\n    }\n\n    return listOrReorder;\n  }\n\n  itemIndexForTop(deltaY) {\n    const heights = this.cachedHeights; // TODO: since heights is a sorted array of integers, we can do\n    // speed up the search using binary search. Remember that linear-search is still\n    // faster than binary-search for small arrays (<64) due CPU branch misprediction.\n\n    for (let i = 0; i < heights.length; i++) {\n      if (heights[i] > deltaY) {\n        return i;\n      }\n    }\n\n    return heights.length - 1;\n  }\n  /********* DOM WRITE ********* */\n\n\n  reorderMove(fromIndex, toIndex) {\n    const itemHeight = this.selectedItemHeight;\n    const children = this.el.children;\n\n    for (let i = 0; i < children.length; i++) {\n      const style = children[i].style;\n      let value = '';\n\n      if (i > fromIndex && i <= toIndex) {\n        value = `translateY(${-itemHeight}px)`;\n      } else if (i < fromIndex && i >= toIndex) {\n        value = `translateY(${itemHeight}px)`;\n      }\n\n      style['transform'] = value;\n    }\n  }\n\n  autoscroll(posY) {\n    if (!this.scrollEl) {\n      return 0;\n    }\n\n    let amount = 0;\n\n    if (posY < this.scrollElTop) {\n      amount = -SCROLL_JUMP;\n    } else if (posY > this.scrollElBottom) {\n      amount = SCROLL_JUMP;\n    }\n\n    if (amount !== 0) {\n      this.scrollEl.scrollBy(0, amount);\n    }\n\n    return this.scrollEl.scrollTop - this.scrollElInitial;\n  }\n\n  render() {\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'reorder-enabled': !this.disabled,\n        'reorder-list-active': this.state !== 0\n        /* Idle */\n\n      }\n    });\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"disabled\": [\"disabledChanged\"]\n    };\n  }\n\n};\n\nconst indexForItem = element => {\n  return element['$ionIndex'];\n};\n\nconst findReorderItem = (node, container) => {\n  let parent;\n\n  while (node) {\n    parent = node.parentElement;\n\n    if (parent === container) {\n      return node;\n    }\n\n    node = parent;\n  }\n\n  return undefined;\n};\n\nconst AUTO_SCROLL_MARGIN = 60;\nconst SCROLL_JUMP = 10;\nconst ITEM_REORDER_SELECTED = 'reorder-selected';\n\nconst reorderArray = (array, from, to) => {\n  const element = array[from];\n  array.splice(from, 1);\n  array.splice(to, 0, element);\n  return array.slice();\n};\n\nReorderGroup.style = reorderGroupCss;\nexport { Reorder as ion_reorder, ReorderGroup as ion_reorder_group };","map":null,"metadata":{},"sourceType":"module"}