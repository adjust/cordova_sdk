{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { s as setPlatformHelpers, g as getMode, a as setMode } from './index-b3eecb14.js';\n\nclass Config {\n  constructor() {\n    this.m = new Map();\n  }\n\n  reset(configObj) {\n    this.m = new Map(Object.entries(configObj));\n  }\n\n  get(key, fallback) {\n    const value = this.m.get(key);\n    return value !== undefined ? value : fallback;\n  }\n\n  getBoolean(key, fallback = false) {\n    const val = this.m.get(key);\n\n    if (val === undefined) {\n      return fallback;\n    }\n\n    if (typeof val === 'string') {\n      return val === 'true';\n    }\n\n    return !!val;\n  }\n\n  getNumber(key, fallback) {\n    const val = parseFloat(this.m.get(key));\n    return isNaN(val) ? fallback !== undefined ? fallback : NaN : val;\n  }\n\n  set(key, value) {\n    this.m.set(key, value);\n  }\n\n}\n\nconst config = /*@__PURE__*/new Config();\n\nconst configFromSession = win => {\n  try {\n    const configStr = win.sessionStorage.getItem(IONIC_SESSION_KEY);\n    return configStr !== null ? JSON.parse(configStr) : {};\n  } catch (e) {\n    return {};\n  }\n};\n\nconst saveConfig = (win, c) => {\n  try {\n    win.sessionStorage.setItem(IONIC_SESSION_KEY, JSON.stringify(c));\n  } catch (e) {\n    return;\n  }\n};\n\nconst configFromURL = win => {\n  const configObj = {};\n  win.location.search.slice(1).split('&').map(entry => entry.split('=')).map(([key, value]) => [decodeURIComponent(key), decodeURIComponent(value)]).filter(([key]) => startsWith(key, IONIC_PREFIX)).map(([key, value]) => [key.slice(IONIC_PREFIX.length), value]).forEach(([key, value]) => {\n    configObj[key] = value;\n  });\n  return configObj;\n};\n\nconst startsWith = (input, search) => {\n  return input.substr(0, search.length) === search;\n};\n\nconst IONIC_PREFIX = 'ionic:';\nconst IONIC_SESSION_KEY = 'ionic-persist-config';\n\nconst getPlatforms = win => setupPlatforms(win);\n\nconst isPlatform = (winOrPlatform, platform) => {\n  if (typeof winOrPlatform === 'string') {\n    platform = winOrPlatform;\n    winOrPlatform = undefined;\n  }\n\n  return getPlatforms(winOrPlatform).includes(platform);\n};\n\nconst setupPlatforms = (win = window) => {\n  if (typeof win === 'undefined') {\n    return [];\n  }\n\n  win.Ionic = win.Ionic || {};\n  let platforms = win.Ionic.platforms;\n\n  if (platforms == null) {\n    platforms = win.Ionic.platforms = detectPlatforms(win);\n    platforms.forEach(p => win.document.documentElement.classList.add(`plt-${p}`));\n  }\n\n  return platforms;\n};\n\nconst detectPlatforms = win => {\n  const customPlatformMethods = config.get('platform');\n  return Object.keys(PLATFORMS_MAP).filter(p => {\n    const customMethod = customPlatformMethods && customPlatformMethods[p];\n    return typeof customMethod === 'function' ? customMethod(win) : PLATFORMS_MAP[p](win);\n  });\n};\n\nconst isMobileWeb = win => isMobile(win) && !isHybrid(win);\n\nconst isIpad = win => {\n  // iOS 12 and below\n  if (testUserAgent(win, /iPad/i)) {\n    return true;\n  } // iOS 13+\n\n\n  if (testUserAgent(win, /Macintosh/i) && isMobile(win)) {\n    return true;\n  }\n\n  return false;\n};\n\nconst isIphone = win => testUserAgent(win, /iPhone/i);\n\nconst isIOS = win => testUserAgent(win, /iPhone|iPod/i) || isIpad(win);\n\nconst isAndroid = win => testUserAgent(win, /android|sink/i);\n\nconst isAndroidTablet = win => {\n  return isAndroid(win) && !testUserAgent(win, /mobile/i);\n};\n\nconst isPhablet = win => {\n  const width = win.innerWidth;\n  const height = win.innerHeight;\n  const smallest = Math.min(width, height);\n  const largest = Math.max(width, height);\n  return smallest > 390 && smallest < 520 && largest > 620 && largest < 800;\n};\n\nconst isTablet = win => {\n  const width = win.innerWidth;\n  const height = win.innerHeight;\n  const smallest = Math.min(width, height);\n  const largest = Math.max(width, height);\n  return isIpad(win) || isAndroidTablet(win) || smallest > 460 && smallest < 820 && largest > 780 && largest < 1400;\n};\n\nconst isMobile = win => matchMedia(win, '(any-pointer:coarse)');\n\nconst isDesktop = win => !isMobile(win);\n\nconst isHybrid = win => isCordova(win) || isCapacitorNative(win);\n\nconst isCordova = win => !!(win['cordova'] || win['phonegap'] || win['PhoneGap']);\n\nconst isCapacitorNative = win => {\n  const capacitor = win['Capacitor'];\n  return !!(capacitor && capacitor.isNative);\n};\n\nconst isElectron = win => testUserAgent(win, /electron/i);\n\nconst isPWA = win => !!(win.matchMedia && win.matchMedia('(display-mode: standalone)').matches || win.navigator.standalone);\n\nconst testUserAgent = (win, expr) => expr.test(win.navigator.userAgent);\n\nconst matchMedia = (win, query) => win.matchMedia && win.matchMedia(query).matches;\n\nconst PLATFORMS_MAP = {\n  'ipad': isIpad,\n  'iphone': isIphone,\n  'ios': isIOS,\n  'android': isAndroid,\n  'phablet': isPhablet,\n  'tablet': isTablet,\n  'cordova': isCordova,\n  'capacitor': isCapacitorNative,\n  'electron': isElectron,\n  'pwa': isPWA,\n  'mobile': isMobile,\n  'mobileweb': isMobileWeb,\n  'desktop': isDesktop,\n  'hybrid': isHybrid\n};\nlet defaultMode;\n\nconst getIonMode = ref => {\n  return ref && getMode(ref) || defaultMode;\n};\n\nconst initialize = (userConfig = {}) => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  const doc = window.document;\n  const win = window;\n  const Ionic = win.Ionic = win.Ionic || {};\n  const platformHelpers = {};\n\n  if (userConfig._ael) {\n    platformHelpers.ael = userConfig._ael;\n  }\n\n  if (userConfig._rel) {\n    platformHelpers.rel = userConfig._rel;\n  }\n\n  if (userConfig._ce) {\n    platformHelpers.ce = userConfig._ce;\n  }\n\n  setPlatformHelpers(platformHelpers); // create the Ionic.config from raw config object (if it exists)\n  // and convert Ionic.config into a ConfigApi that has a get() fn\n\n  const configObj = Object.assign(Object.assign(Object.assign(Object.assign(Object.assign({}, configFromSession(win)), {\n    persistConfig: false\n  }), Ionic.config), configFromURL(win)), userConfig);\n  config.reset(configObj);\n\n  if (config.getBoolean('persistConfig')) {\n    saveConfig(win, configObj);\n  } // Setup platforms\n\n\n  setupPlatforms(win); // first see if the mode was set as an attribute on <html>\n  // which could have been set by the user, or by pre-rendering\n  // otherwise get the mode via config settings, and fallback to md\n\n  Ionic.config = config;\n  Ionic.mode = defaultMode = config.get('mode', doc.documentElement.getAttribute('mode') || (isPlatform(win, 'ios') ? 'ios' : 'md'));\n  config.set('mode', defaultMode);\n  doc.documentElement.setAttribute('mode', defaultMode);\n  doc.documentElement.classList.add(defaultMode);\n\n  if (config.getBoolean('_testing')) {\n    config.set('animated', false);\n  }\n\n  const isIonicElement = elm => elm.tagName && elm.tagName.startsWith('ION-');\n\n  const isAllowedIonicModeValue = elmMode => ['ios', 'md'].includes(elmMode);\n\n  setMode(elm => {\n    while (elm) {\n      const elmMode = elm.mode || elm.getAttribute('mode');\n\n      if (elmMode) {\n        if (isAllowedIonicModeValue(elmMode)) {\n          return elmMode;\n        } else if (isIonicElement(elm)) {\n          console.warn('Invalid ionic mode: \"' + elmMode + '\", expected: \"ios\" or \"md\"');\n        }\n      }\n\n      elm = elm.parentElement;\n    }\n\n    return defaultMode;\n  });\n};\n\nexport { isPlatform as a, getIonMode as b, config as c, getPlatforms as g, initialize as i };","map":null,"metadata":{},"sourceType":"module"}