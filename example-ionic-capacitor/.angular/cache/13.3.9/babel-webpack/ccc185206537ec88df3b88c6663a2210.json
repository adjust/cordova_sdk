{"ast":null,"code":"import _asyncToGenerator from \"/Users/uerceg/GitHub/cordova_sdk_dev/example-ionic-capacitor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, h, H as Host, i as getElement, e as createEvent } from './index-b3eecb14.js';\nimport { i as chevronDown } from './index-e3f61316.js';\nimport { c as config, b as getIonMode } from './ionic-global-0ebe321c.js';\nimport { r as raf, t as transitionEndAsync, a as addEventListener, b as removeEventListener, g as getElementRoot } from './helpers-6e1e5b65.js';\nconst accordionIosCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}:host(.accordion-next) ::slotted(ion-item[slot=header]){--border-width:0.55px 0px 0.55px 0px}\";\nconst accordionMdCss = \":host{display:block;position:relative;width:100%;background-color:var(--ion-background-color, #ffffff);overflow:hidden;z-index:0}:host(.accordion-expanding) ::slotted(ion-item[slot=header]),:host(.accordion-expanded) ::slotted(ion-item[slot=header]){--border-width:0px}:host(.accordion-animated){-webkit-transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:all 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}:host(.accordion-animated) #content{-webkit-transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1);transition:max-height 300ms cubic-bezier(0.25, 0.8, 0.5, 1)}#content{overflow:hidden;will-change:max-height}:host(.accordion-collapsing) #content{max-height:0 !important}:host(.accordion-collapsed) #content{display:none}:host(.accordion-expanding) #content{max-height:0}:host(.accordion-disabled) #header,:host(.accordion-readonly) #header,:host(.accordion-disabled) #content,:host(.accordion-readonly) #content{pointer-events:none}:host(.accordion-disabled) #header,:host(.accordion-disabled) #content{opacity:0.4}@media (prefers-reduced-motion: reduce){:host,#content{-webkit-transition:none !important;transition:none !important}}\";\nconst Accordion = class {\n  constructor(hostRef) {\n    var _this = this;\n\n    registerInstance(this, hostRef);\n\n    this.updateListener = () => this.updateState(false);\n\n    this.state = 1\n    /* Collapsed */\n    ;\n    this.isNext = false;\n    this.isPrevious = false;\n    /**\n     * The value of the accordion. Defaults to an autogenerated\n     * value.\n     */\n\n    this.value = `ion-accordion-${accordionIds++}`;\n    /**\n     * If `true`, the accordion cannot be interacted with.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the accordion cannot be interacted with,\n     * but does not alter the opacity.\n     */\n\n    this.readonly = false;\n    /**\n     * The toggle icon to use. This icon will be\n     * rotated when the accordion is expanded\n     * or collapsed.\n     */\n\n    this.toggleIcon = chevronDown;\n    /**\n     * The slot inside of `ion-item` to\n     * place the toggle icon. Defaults to `'end'`.\n     */\n\n    this.toggleIconSlot = 'end';\n\n    this.setItemDefaults = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * For a11y purposes, we make\n       * the ion-item a button so users\n       * can tab to it and use keyboard\n       * navigation to get around.\n       */\n\n\n      ionItem.button = true;\n      ionItem.detail = false;\n      /**\n       * By default, the lines in an\n       * item should be full here, but\n       * only do that if a user has\n       * not explicitly overridden them\n       */\n\n      if (ionItem.lines === undefined) {\n        ionItem.lines = 'full';\n      }\n    };\n\n    this.getSlottedHeaderIonItem = () => {\n      const {\n        headerEl\n      } = this;\n\n      if (!headerEl) {\n        return;\n      }\n      /**\n       * Get the first ion-item\n       * slotted in the header slot\n       */\n\n\n      const slot = headerEl.querySelector('slot');\n\n      if (!slot) {\n        return;\n      } // This is not defined in unit tests\n\n\n      const ionItem = slot.assignedElements && slot.assignedElements().find(el => el.tagName === 'ION-ITEM');\n      return ionItem;\n    };\n\n    this.setAria = (expanded = false) => {\n      const ionItem = this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n      /**\n       * Get the native <button> element inside of\n       * ion-item because that is what will be focused\n       */\n\n\n      const root = getElementRoot(ionItem);\n      const button = root.querySelector('button');\n\n      if (!button) {\n        return;\n      }\n\n      button.setAttribute('aria-expanded', `${expanded}`);\n    };\n\n    this.slotToggleIcon = () => {\n      const ionItem = this.getSlottedHeaderIonItem();\n\n      if (!ionItem) {\n        return;\n      }\n\n      const {\n        toggleIconSlot,\n        toggleIcon\n      } = this;\n      /**\n       * Check if there already is a toggle icon.\n       * If so, do not add another one.\n       */\n\n      const existingToggleIcon = ionItem.querySelector('.ion-accordion-toggle-icon');\n\n      if (existingToggleIcon) {\n        return;\n      }\n\n      const iconEl = document.createElement('ion-icon');\n      iconEl.slot = toggleIconSlot;\n      iconEl.lazy = false;\n      iconEl.classList.add('ion-accordion-toggle-icon');\n      iconEl.icon = toggleIcon;\n      iconEl.setAttribute('aria-hidden', 'true');\n      ionItem.appendChild(iconEl);\n    };\n\n    this.expandAccordion = (initialUpdate = false) => {\n      if (initialUpdate) {\n        this.state = 4\n        /* Expanded */\n        ;\n        return;\n      }\n\n      if (this.state === 4\n      /* Expanded */\n      ) {\n        return;\n      }\n\n      const {\n        contentEl,\n        contentElWrapper\n      } = this;\n\n      if (contentEl === undefined || contentElWrapper === undefined) {\n        return;\n      }\n\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n\n      if (this.shouldAnimate()) {\n        raf(() => {\n          this.state = 8\n          /* Expanding */\n          ;\n          this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator(function* () {\n            const contentHeight = contentElWrapper.offsetHeight;\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            contentEl.style.setProperty('max-height', `${contentHeight}px`);\n            yield waitForTransition;\n            _this.state = 4\n            /* Expanded */\n            ;\n            contentEl.style.removeProperty('max-height');\n          }));\n        });\n      } else {\n        this.state = 4\n        /* Expanded */\n        ;\n      }\n    };\n\n    this.collapseAccordion = (initialUpdate = false) => {\n      if (initialUpdate) {\n        this.state = 1\n        /* Collapsed */\n        ;\n        return;\n      }\n\n      if (this.state === 1\n      /* Collapsed */\n      ) {\n        return;\n      }\n\n      const {\n        contentEl\n      } = this;\n\n      if (contentEl === undefined) {\n        return;\n      }\n\n      if (this.currentRaf !== undefined) {\n        cancelAnimationFrame(this.currentRaf);\n      }\n\n      if (this.shouldAnimate()) {\n        this.currentRaf = raf( /*#__PURE__*/_asyncToGenerator(function* () {\n          const contentHeight = contentEl.offsetHeight;\n          contentEl.style.setProperty('max-height', `${contentHeight}px`);\n          raf( /*#__PURE__*/_asyncToGenerator(function* () {\n            const waitForTransition = transitionEndAsync(contentEl, 2000);\n            _this.state = 2\n            /* Collapsing */\n            ;\n            yield waitForTransition;\n            _this.state = 1\n            /* Collapsed */\n            ;\n            contentEl.style.removeProperty('max-height');\n          }));\n        }));\n      } else {\n        this.state = 1\n        /* Collapsed */\n        ;\n      }\n    };\n    /**\n     * Helper function to determine if\n     * something should animate.\n     * If prefers-reduced-motion is set\n     * then we should not animate, regardless\n     * of what is set in the config.\n     */\n\n\n    this.shouldAnimate = () => {\n      if (typeof window === 'undefined') {\n        return false;\n      }\n\n      const prefersReducedMotion = matchMedia('(prefers-reduced-motion: reduce)').matches;\n\n      if (prefersReducedMotion) {\n        return false;\n      }\n\n      const animated = config.get('animated', true);\n\n      if (!animated) {\n        return false;\n      }\n\n      if (this.accordionGroupEl && !this.accordionGroupEl.animated) {\n        return false;\n      }\n\n      return true;\n    };\n\n    this.updateState = /*#__PURE__*/_asyncToGenerator(function* (initialUpdate = false) {\n      const accordionGroup = _this.accordionGroupEl;\n      const accordionValue = _this.value;\n\n      if (!accordionGroup) {\n        return;\n      }\n\n      const value = accordionGroup.value;\n      const shouldExpand = Array.isArray(value) ? value.includes(accordionValue) : value === accordionValue;\n\n      if (shouldExpand) {\n        _this.expandAccordion(initialUpdate);\n\n        _this.isNext = _this.isPrevious = false;\n      } else {\n        _this.collapseAccordion(initialUpdate);\n        /**\n         * When using popout or inset,\n         * the collapsed accordion items\n         * may need additional border radius\n         * applied. Check to see if the\n         * next or previous accordion is selected.\n         */\n\n\n        const nextAccordion = _this.getNextSibling();\n\n        const nextAccordionValue = nextAccordion && nextAccordion.value;\n\n        if (nextAccordionValue !== undefined) {\n          _this.isPrevious = Array.isArray(value) ? value.includes(nextAccordionValue) : value === nextAccordionValue;\n        }\n\n        const previousAccordion = _this.getPreviousSibling();\n\n        const previousAccordionValue = previousAccordion && previousAccordion.value;\n\n        if (previousAccordionValue !== undefined) {\n          _this.isNext = Array.isArray(value) ? value.includes(previousAccordionValue) : value === previousAccordionValue;\n        }\n      }\n    });\n\n    this.getNextSibling = () => {\n      if (!this.el) {\n        return;\n      }\n\n      const nextSibling = this.el.nextElementSibling;\n\n      if ((nextSibling === null || nextSibling === void 0 ? void 0 : nextSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return nextSibling;\n    };\n\n    this.getPreviousSibling = () => {\n      if (!this.el) {\n        return;\n      }\n\n      const previousSibling = this.el.previousElementSibling;\n\n      if ((previousSibling === null || previousSibling === void 0 ? void 0 : previousSibling.tagName) !== 'ION-ACCORDION') {\n        return;\n      }\n\n      return previousSibling;\n    };\n  }\n\n  connectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl = this.el && this.el.closest('ion-accordion-group');\n\n    if (accordionGroupEl) {\n      this.updateState(true);\n      addEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n\n  disconnectedCallback() {\n    const accordionGroupEl = this.accordionGroupEl;\n\n    if (accordionGroupEl) {\n      removeEventListener(accordionGroupEl, 'ionChange', this.updateListener);\n    }\n  }\n\n  componentDidLoad() {\n    this.setItemDefaults();\n    this.slotToggleIcon();\n    /**\n     * We need to wait a tick because we\n     * just set ionItem.button = true and\n     * the button has not have been rendered yet.\n     */\n\n    raf(() => {\n      /**\n       * Set aria label on button inside of ion-item\n       * once the inner content has been rendered.\n       */\n      const expanded = this.state === 4\n      /* Expanded */\n      || this.state === 8\n      /* Expanding */\n      ;\n      this.setAria(expanded);\n    });\n  }\n\n  toggleExpanded() {\n    const {\n      accordionGroupEl,\n      value,\n      state\n    } = this;\n\n    if (accordionGroupEl) {\n      /**\n       * Because the accordion group may or may\n       * not allow multiple accordions open, we\n       * need to request the toggling of this\n       * accordion and the accordion group will\n       * make the decision on whether or not\n       * to allow it.\n       */\n      const expand = state === 1\n      /* Collapsed */\n      || state === 2\n      /* Collapsing */\n      ;\n      accordionGroupEl.requestAccordionToggle(value, expand);\n    }\n  }\n\n  render() {\n    const {\n      disabled,\n      readonly\n    } = this;\n    const mode = getIonMode(this);\n    const expanded = this.state === 4\n    /* Expanded */\n    || this.state === 8\n    /* Expanding */\n    ;\n    const headerPart = expanded ? 'header expanded' : 'header';\n    const contentPart = expanded ? 'content expanded' : 'content';\n    this.setAria(expanded);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'accordion-expanding': this.state === 8\n        /* Expanding */\n        ,\n        'accordion-expanded': this.state === 4\n        /* Expanded */\n        ,\n        'accordion-collapsing': this.state === 2\n        /* Collapsing */\n        ,\n        'accordion-collapsed': this.state === 1\n        /* Collapsed */\n        ,\n        'accordion-next': this.isNext,\n        'accordion-previous': this.isPrevious,\n        'accordion-disabled': disabled,\n        'accordion-readonly': readonly,\n        'accordion-animated': config.getBoolean('animated', true)\n      }\n    }, h(\"div\", {\n      onClick: () => this.toggleExpanded(),\n      id: \"header\",\n      part: headerPart,\n      \"aria-controls\": \"content\",\n      ref: headerEl => this.headerEl = headerEl\n    }, h(\"slot\", {\n      name: \"header\"\n    })), h(\"div\", {\n      id: \"content\",\n      part: contentPart,\n      role: \"region\",\n      \"aria-labelledby\": \"header\",\n      ref: contentEl => this.contentEl = contentEl\n    }, h(\"div\", {\n      id: \"content-wrapper\",\n      ref: contentElWrapper => this.contentElWrapper = contentElWrapper\n    }, h(\"slot\", {\n      name: \"content\"\n    }))));\n  }\n\n  static get delegatesFocus() {\n    return true;\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n};\nlet accordionIds = 0;\nAccordion.style = {\n  ios: accordionIosCss,\n  md: accordionMdCss\n};\nconst accordionGroupIosCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){border-bottom:none}\";\nconst accordionGroupMdCss = \":host{display:block}:host(.accordion-group-expand-inset){margin-left:16px;margin-right:16px;margin-top:16px;margin-bottom:16px}@supports ((-webkit-margin-start: 0) or (margin-inline-start: 0)) or (-webkit-margin-start: 0){:host(.accordion-group-expand-inset){margin-left:unset;margin-right:unset;-webkit-margin-start:16px;margin-inline-start:16px;-webkit-margin-end:16px;margin-inline-end:16px}}:host(.accordion-group-expand-inset) ::slotted(ion-accordion){-webkit-box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12);box-shadow:0px 3px 1px -2px rgba(0, 0, 0, 0.2), 0px 2px 2px 0px rgba(0, 0, 0, 0.14), 0px 1px 5px 0px rgba(0, 0, 0, 0.12)}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanding),:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-expanded){margin-left:0;margin-right:0;margin-top:16px;margin-bottom:16px;border-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-previous),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-previous){border-bottom-right-radius:6px;border-bottom-left-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host-context([dir=rtl]):host(.accordion-group-expand-inset) ::slotted(ion-accordion.accordion-next),:host-context([dir=rtl]).accordion-group-expand-inset ::slotted(ion-accordion.accordion-next){border-top-left-radius:6px;border-top-right-radius:6px}:host(.accordion-group-expand-inset) ::slotted(ion-accordion):first-of-type{margin-left:0;margin-right:0;margin-top:0;margin-bottom:0}\";\nconst AccordionGroup = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.ionChange = createEvent(this, \"ionChange\", 7);\n    /**\n     * If `true`, all accordions inside of the\n     * accordion group will animate when expanding\n     * or collapsing.\n     */\n\n    this.animated = true;\n    /**\n     * If `true`, the accordion group cannot be interacted with.\n     */\n\n    this.disabled = false;\n    /**\n     * If `true`, the accordion group cannot be interacted with,\n     * but does not alter the opacity.\n     */\n\n    this.readonly = false;\n    /**\n     * Describes the expansion behavior for each accordion.\n     * Possible values are `\"compact\"` and `\"inset\"`.\n     * Defaults to `\"compact\"`.\n     */\n\n    this.expand = 'compact';\n  }\n\n  valueChanged() {\n    const {\n      value,\n      multiple\n    } = this;\n    /**\n     * If accordion group does not\n     * let multiple accordions be open\n     * at once, but user passes an array\n     * just grab the first value.\n     */\n\n    if (!multiple && Array.isArray(value)) {\n      this.value = value[0];\n    } else {\n      this.ionChange.emit({\n        value: this.value\n      });\n    }\n  }\n\n  disabledChanged() {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        disabled\n      } = _this2;\n      const accordions = yield _this2.getAccordions();\n\n      for (const accordion of accordions) {\n        accordion.disabled = disabled;\n      }\n    })();\n  }\n\n  readonlyChanged() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        readonly\n      } = _this3;\n      const accordions = yield _this3.getAccordions();\n\n      for (const accordion of accordions) {\n        accordion.readonly = readonly;\n      }\n    })();\n  }\n\n  onKeydown(ev) {\n    var _this4 = this;\n\n    return _asyncToGenerator(function* () {\n      const activeElement = document.activeElement;\n\n      if (!activeElement) {\n        return;\n      }\n\n      const accordionEl = activeElement.tagName === 'ION-ACCORDION' ? activeElement : activeElement.closest('ion-accordion');\n\n      if (!accordionEl) {\n        return;\n      }\n\n      const closestGroup = accordionEl.closest('ion-accordion-group');\n\n      if (closestGroup !== _this4.el) {\n        return;\n      } // If the active accordion is not in the current array of accordions, do not do anything\n\n\n      const accordions = yield _this4.getAccordions();\n      const startingIndex = accordions.findIndex(a => a === accordionEl);\n\n      if (startingIndex === -1) {\n        return;\n      }\n\n      let accordion;\n\n      if (ev.key === 'ArrowDown') {\n        accordion = _this4.findNextAccordion(accordions, startingIndex);\n      } else if (ev.key === 'ArrowUp') {\n        accordion = _this4.findPreviousAccordion(accordions, startingIndex);\n      } else if (ev.key === 'Home') {\n        accordion = accordions[0];\n      } else if (ev.key === 'End') {\n        accordion = accordions[accordions.length - 1];\n      }\n\n      if (accordion !== undefined && accordion !== activeElement) {\n        accordion.focus();\n      }\n    })();\n  }\n\n  componentDidLoad() {\n    var _this5 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this5.disabled) {\n        _this5.disabledChanged();\n      }\n\n      if (_this5.readonly) {\n        _this5.readonlyChanged();\n      }\n    })();\n  }\n  /**\n   * @internal\n   */\n\n\n  requestAccordionToggle(accordionValue, accordionExpand) {\n    var _this6 = this;\n\n    return _asyncToGenerator(function* () {\n      const {\n        multiple,\n        value,\n        readonly,\n        disabled\n      } = _this6;\n\n      if (readonly || disabled) {\n        return;\n      }\n\n      if (accordionExpand) {\n        /**\n         * If group accepts multiple values\n         * check to see if value is already in\n         * in values array. If not, add it\n         * to the array.\n         */\n        if (multiple) {\n          const groupValue = value || [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          const valueExists = processedValue.find(v => v === accordionValue);\n\n          if (valueExists === undefined && accordionValue !== undefined) {\n            _this6.value = [...processedValue, accordionValue];\n          }\n        } else {\n          _this6.value = accordionValue;\n        }\n      } else {\n        /**\n         * If collapsing accordion, either filter the value\n         * out of the values array or unset the value.\n         */\n        if (multiple) {\n          const groupValue = value || [];\n          const processedValue = Array.isArray(groupValue) ? groupValue : [groupValue];\n          _this6.value = processedValue.filter(v => v !== accordionValue);\n        } else {\n          _this6.value = undefined;\n        }\n      }\n    })();\n  }\n\n  findNextAccordion(accordions, startingIndex) {\n    const nextAccordion = accordions[startingIndex + 1]; // tslint:disable-next-line:strict-type-predicates\n\n    if (nextAccordion === undefined) {\n      return accordions[0];\n    }\n\n    return nextAccordion;\n  }\n\n  findPreviousAccordion(accordions, startingIndex) {\n    const prevAccordion = accordions[startingIndex - 1]; // tslint:disable-next-line:strict-type-predicates\n\n    if (prevAccordion === undefined) {\n      return accordions[accordions.length - 1];\n    }\n\n    return prevAccordion;\n  }\n  /**\n   * @internal\n   */\n\n\n  getAccordions() {\n    var _this7 = this;\n\n    return _asyncToGenerator(function* () {\n      return Array.from(_this7.el.querySelectorAll(':scope > ion-accordion'));\n    })();\n  }\n\n  render() {\n    const {\n      disabled,\n      readonly,\n      expand\n    } = this;\n    const mode = getIonMode(this);\n    return h(Host, {\n      class: {\n        [mode]: true,\n        'accordion-group-disabled': disabled,\n        'accordion-group-readonly': readonly,\n        [`accordion-group-expand-${expand}`]: true\n      },\n      role: \"presentation\"\n    }, h(\"slot\", null));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"value\": [\"valueChanged\"],\n      \"disabled\": [\"disabledChanged\"],\n      \"readonly\": [\"readonlyChanged\"]\n    };\n  }\n\n};\nAccordionGroup.style = {\n  ios: accordionGroupIosCss,\n  md: accordionGroupMdCss\n};\nexport { Accordion as ion_accordion, AccordionGroup as ion_accordion_group };","map":null,"metadata":{},"sourceType":"module"}