{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { c as createAnimation } from './animation-19dbf9bf.js';\nimport { g as getIonPageElement } from './index-e6c2c822.js';\nimport './helpers-6e1e5b65.js';\nimport './index-b3eecb14.js';\nconst DURATION = 540;\n\nconst getClonedElement = tagName => {\n  return document.querySelector(`${tagName}.ion-cloned-element`);\n};\n\nconst shadow = el => {\n  return el.shadowRoot || el;\n};\n\nconst getLargeTitle = refEl => {\n  const tabs = refEl.tagName === 'ION-TABS' ? refEl : refEl.querySelector('ion-tabs');\n  const query = 'ion-content ion-header:not(.header-collapse-condense-inactive) ion-title.title-large';\n\n  if (tabs != null) {\n    const activeTab = tabs.querySelector('ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)');\n    return activeTab != null ? activeTab.querySelector(query) : null;\n  }\n\n  return refEl.querySelector(query);\n};\n\nconst getBackButton = (refEl, backDirection) => {\n  const tabs = refEl.tagName === 'ION-TABS' ? refEl : refEl.querySelector('ion-tabs');\n  let buttonsList = [];\n\n  if (tabs != null) {\n    const activeTab = tabs.querySelector('ion-tab:not(.tab-hidden), .ion-page:not(.ion-page-hidden)');\n\n    if (activeTab != null) {\n      buttonsList = activeTab.querySelectorAll('ion-buttons');\n    }\n  } else {\n    buttonsList = refEl.querySelectorAll('ion-buttons');\n  }\n\n  for (const buttons of buttonsList) {\n    const parentHeader = buttons.closest('ion-header');\n    const activeHeader = parentHeader && !parentHeader.classList.contains('header-collapse-condense-inactive');\n    const backButton = buttons.querySelector('ion-back-button');\n    const buttonsCollapse = buttons.classList.contains('buttons-collapse');\n    const startSlot = buttons.slot === 'start' || buttons.slot === '';\n\n    if (backButton !== null && startSlot && (buttonsCollapse && activeHeader && backDirection || !buttonsCollapse)) {\n      return backButton;\n    }\n  }\n\n  return null;\n};\n\nconst createLargeTitleTransition = (rootAnimation, rtl, backDirection, enteringEl, leavingEl) => {\n  const enteringBackButton = getBackButton(enteringEl, backDirection);\n  const leavingLargeTitle = getLargeTitle(leavingEl);\n  const enteringLargeTitle = getLargeTitle(enteringEl);\n  const leavingBackButton = getBackButton(leavingEl, backDirection);\n  const shouldAnimationForward = enteringBackButton !== null && leavingLargeTitle !== null && !backDirection;\n  const shouldAnimationBackward = enteringLargeTitle !== null && leavingBackButton !== null && backDirection;\n\n  if (shouldAnimationForward) {\n    const leavingLargeTitleBox = leavingLargeTitle.getBoundingClientRect();\n    const enteringBackButtonBox = enteringBackButton.getBoundingClientRect();\n    animateLargeTitle(rootAnimation, rtl, backDirection, leavingLargeTitle, leavingLargeTitleBox, enteringBackButtonBox);\n    animateBackButton(rootAnimation, rtl, backDirection, enteringBackButton, leavingLargeTitleBox, enteringBackButtonBox);\n  } else if (shouldAnimationBackward) {\n    const enteringLargeTitleBox = enteringLargeTitle.getBoundingClientRect();\n    const leavingBackButtonBox = leavingBackButton.getBoundingClientRect();\n    animateLargeTitle(rootAnimation, rtl, backDirection, enteringLargeTitle, enteringLargeTitleBox, leavingBackButtonBox);\n    animateBackButton(rootAnimation, rtl, backDirection, leavingBackButton, enteringLargeTitleBox, leavingBackButtonBox);\n  }\n\n  return {\n    forward: shouldAnimationForward,\n    backward: shouldAnimationBackward\n  };\n};\n\nconst animateBackButton = (rootAnimation, rtl, backDirection, backButtonEl, largeTitleBox, backButtonBox) => {\n  const BACK_BUTTON_START_OFFSET = rtl ? `calc(100% - ${backButtonBox.right + 4}px)` : `${backButtonBox.left - 4}px`;\n  const START_TEXT_TRANSLATE = rtl ? '7px' : '-7px';\n  const END_TEXT_TRANSLATE = rtl ? '-4px' : '4px';\n  const ICON_TRANSLATE = rtl ? '-4px' : '4px';\n  const TEXT_ORIGIN_X = rtl ? 'right' : 'left';\n  const ICON_ORIGIN_X = rtl ? 'left' : 'right';\n  const FORWARD_TEXT_KEYFRAMES = [{\n    offset: 0,\n    opacity: 0,\n    transform: `translate3d(${START_TEXT_TRANSLATE}, ${largeTitleBox.top - 40}px, 0) scale(2.1)`\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translate3d(${END_TEXT_TRANSLATE}, ${backButtonBox.top - 46}px, 0) scale(1)`\n  }];\n  const BACKWARD_TEXT_KEYFRAMES = [{\n    offset: 0,\n    opacity: 1,\n    transform: `translate3d(${END_TEXT_TRANSLATE}, ${backButtonBox.top - 46}px, 0) scale(1)`\n  }, {\n    offset: 0.6,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0,\n    transform: `translate3d(${START_TEXT_TRANSLATE}, ${largeTitleBox.top - 40}px, 0) scale(2.1)`\n  }];\n  const TEXT_KEYFRAMES = backDirection ? BACKWARD_TEXT_KEYFRAMES : FORWARD_TEXT_KEYFRAMES;\n  const FORWARD_ICON_KEYFRAMES = [{\n    offset: 0,\n    opacity: 0,\n    transform: `translate3d(${ICON_TRANSLATE}, ${backButtonBox.top - 41}px, 0) scale(0.6)`\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translate3d(${ICON_TRANSLATE}, ${backButtonBox.top - 46}px, 0) scale(1)`\n  }];\n  const BACKWARD_ICON_KEYFRAMES = [{\n    offset: 0,\n    opacity: 1,\n    transform: `translate3d(${ICON_TRANSLATE}, ${backButtonBox.top - 46}px, 0) scale(1)`\n  }, {\n    offset: 0.2,\n    opacity: 0,\n    transform: `translate3d(${ICON_TRANSLATE}, ${backButtonBox.top - 41}px, 0) scale(0.6)`\n  }, {\n    offset: 1,\n    opacity: 0,\n    transform: `translate3d(${ICON_TRANSLATE}, ${backButtonBox.top - 41}px, 0) scale(0.6)`\n  }];\n  const ICON_KEYFRAMES = backDirection ? BACKWARD_ICON_KEYFRAMES : FORWARD_ICON_KEYFRAMES;\n  const enteringBackButtonTextAnimation = createAnimation();\n  const enteringBackButtonIconAnimation = createAnimation();\n  const clonedBackButtonEl = getClonedElement('ion-back-button');\n  const backButtonTextEl = shadow(clonedBackButtonEl).querySelector('.button-text');\n  const backButtonIconEl = shadow(clonedBackButtonEl).querySelector('ion-icon');\n  clonedBackButtonEl.text = backButtonEl.text;\n  clonedBackButtonEl.mode = backButtonEl.mode;\n  clonedBackButtonEl.icon = backButtonEl.icon;\n  clonedBackButtonEl.color = backButtonEl.color;\n  clonedBackButtonEl.disabled = backButtonEl.disabled;\n  clonedBackButtonEl.style.setProperty('display', 'block');\n  clonedBackButtonEl.style.setProperty('position', 'fixed');\n  enteringBackButtonIconAnimation.addElement(backButtonIconEl);\n  enteringBackButtonTextAnimation.addElement(backButtonTextEl);\n  enteringBackButtonTextAnimation.beforeStyles({\n    'transform-origin': `${TEXT_ORIGIN_X} center`\n  }).beforeAddWrite(() => {\n    backButtonEl.style.setProperty('display', 'none');\n    clonedBackButtonEl.style.setProperty(TEXT_ORIGIN_X, BACK_BUTTON_START_OFFSET);\n  }).afterAddWrite(() => {\n    backButtonEl.style.setProperty('display', '');\n    clonedBackButtonEl.style.setProperty('display', 'none');\n    clonedBackButtonEl.style.removeProperty(TEXT_ORIGIN_X);\n  }).keyframes(TEXT_KEYFRAMES);\n  enteringBackButtonIconAnimation.beforeStyles({\n    'transform-origin': `${ICON_ORIGIN_X} center`\n  }).keyframes(ICON_KEYFRAMES);\n  rootAnimation.addAnimation([enteringBackButtonTextAnimation, enteringBackButtonIconAnimation]);\n};\n\nconst animateLargeTitle = (rootAnimation, rtl, backDirection, largeTitleEl, largeTitleBox, backButtonBox) => {\n  const TITLE_START_OFFSET = rtl ? `calc(100% - ${largeTitleBox.right}px)` : `${largeTitleBox.left}px`;\n  const START_TRANSLATE = rtl ? '-18px' : '18px';\n  const ORIGIN_X = rtl ? 'right' : 'left';\n  const BACKWARDS_KEYFRAMES = [{\n    offset: 0,\n    opacity: 0,\n    transform: `translate3d(${START_TRANSLATE}, ${backButtonBox.top - 4}px, 0) scale(0.49)`\n  }, {\n    offset: 0.1,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 1,\n    transform: `translate3d(0, ${largeTitleBox.top - 2}px, 0) scale(1)`\n  }];\n  const FORWARDS_KEYFRAMES = [{\n    offset: 0,\n    opacity: 0.99,\n    transform: `translate3d(0, ${largeTitleBox.top - 2}px, 0) scale(1)`\n  }, {\n    offset: 0.6,\n    opacity: 0\n  }, {\n    offset: 1,\n    opacity: 0,\n    transform: `translate3d(${START_TRANSLATE}, ${backButtonBox.top - 4}px, 0) scale(0.5)`\n  }];\n  const KEYFRAMES = backDirection ? BACKWARDS_KEYFRAMES : FORWARDS_KEYFRAMES;\n  const clonedTitleEl = getClonedElement('ion-title');\n  const clonedLargeTitleAnimation = createAnimation();\n  clonedTitleEl.innerText = largeTitleEl.innerText;\n  clonedTitleEl.size = largeTitleEl.size;\n  clonedTitleEl.color = largeTitleEl.color;\n  clonedLargeTitleAnimation.addElement(clonedTitleEl);\n  clonedLargeTitleAnimation.beforeStyles({\n    'transform-origin': `${ORIGIN_X} center`,\n    'height': '46px',\n    'display': '',\n    'position': 'relative',\n    [ORIGIN_X]: TITLE_START_OFFSET\n  }).beforeAddWrite(() => {\n    largeTitleEl.style.setProperty('display', 'none');\n  }).afterAddWrite(() => {\n    largeTitleEl.style.setProperty('display', '');\n    clonedTitleEl.style.setProperty('display', 'none');\n  }).keyframes(KEYFRAMES);\n  rootAnimation.addAnimation(clonedLargeTitleAnimation);\n};\n\nconst iosTransitionAnimation = (navEl, opts) => {\n  try {\n    const EASING = 'cubic-bezier(0.32,0.72,0,1)';\n    const OPACITY = 'opacity';\n    const TRANSFORM = 'transform';\n    const CENTER = '0%';\n    const OFF_OPACITY = 0.8;\n    const isRTL = navEl.ownerDocument.dir === 'rtl';\n    const OFF_RIGHT = isRTL ? '-99.5%' : '99.5%';\n    const OFF_LEFT = isRTL ? '33%' : '-33%';\n    const enteringEl = opts.enteringEl;\n    const leavingEl = opts.leavingEl;\n    const backDirection = opts.direction === 'back';\n    const contentEl = enteringEl.querySelector(':scope > ion-content');\n    const headerEls = enteringEl.querySelectorAll(':scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *');\n    const enteringToolBarEls = enteringEl.querySelectorAll(':scope > ion-header > ion-toolbar');\n    const rootAnimation = createAnimation();\n    const enteringContentAnimation = createAnimation();\n    rootAnimation.addElement(enteringEl).duration(opts.duration || DURATION).easing(opts.easing || EASING).fill('both').beforeRemoveClass('ion-page-invisible');\n\n    if (leavingEl && navEl) {\n      const navDecorAnimation = createAnimation();\n      navDecorAnimation.addElement(navEl);\n      rootAnimation.addAnimation(navDecorAnimation);\n    }\n\n    if (!contentEl && enteringToolBarEls.length === 0 && headerEls.length === 0) {\n      enteringContentAnimation.addElement(enteringEl.querySelector(':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs')); // REVIEW\n    } else {\n      enteringContentAnimation.addElement(contentEl); // REVIEW\n\n      enteringContentAnimation.addElement(headerEls);\n    }\n\n    rootAnimation.addAnimation(enteringContentAnimation);\n\n    if (backDirection) {\n      enteringContentAnimation.beforeClearStyles([OPACITY]).fromTo('transform', `translateX(${OFF_LEFT})`, `translateX(${CENTER})`).fromTo(OPACITY, OFF_OPACITY, 1);\n    } else {\n      // entering content, forward direction\n      enteringContentAnimation.beforeClearStyles([OPACITY]).fromTo('transform', `translateX(${OFF_RIGHT})`, `translateX(${CENTER})`);\n    }\n\n    if (contentEl) {\n      const enteringTransitionEffectEl = shadow(contentEl).querySelector('.transition-effect');\n\n      if (enteringTransitionEffectEl) {\n        const enteringTransitionCoverEl = enteringTransitionEffectEl.querySelector('.transition-cover');\n        const enteringTransitionShadowEl = enteringTransitionEffectEl.querySelector('.transition-shadow');\n        const enteringTransitionEffect = createAnimation();\n        const enteringTransitionCover = createAnimation();\n        const enteringTransitionShadow = createAnimation();\n        enteringTransitionEffect.addElement(enteringTransitionEffectEl).beforeStyles({\n          opacity: '1',\n          display: 'block'\n        }).afterStyles({\n          opacity: '',\n          display: ''\n        });\n        enteringTransitionCover.addElement(enteringTransitionCoverEl) // REVIEW\n        .beforeClearStyles([OPACITY]).fromTo(OPACITY, 0, 0.1);\n        enteringTransitionShadow.addElement(enteringTransitionShadowEl) // REVIEW\n        .beforeClearStyles([OPACITY]).fromTo(OPACITY, 0.03, 0.70);\n        enteringTransitionEffect.addAnimation([enteringTransitionCover, enteringTransitionShadow]);\n        enteringContentAnimation.addAnimation([enteringTransitionEffect]);\n      }\n    }\n\n    const enteringContentHasLargeTitle = enteringEl.querySelector('ion-header.header-collapse-condense');\n    const {\n      forward,\n      backward\n    } = createLargeTitleTransition(rootAnimation, isRTL, backDirection, enteringEl, leavingEl);\n    enteringToolBarEls.forEach(enteringToolBarEl => {\n      const enteringToolBar = createAnimation();\n      enteringToolBar.addElement(enteringToolBarEl);\n      rootAnimation.addAnimation(enteringToolBar);\n      const enteringTitle = createAnimation();\n      enteringTitle.addElement(enteringToolBarEl.querySelector('ion-title')); // REVIEW\n\n      const enteringToolBarButtons = createAnimation();\n      const buttons = Array.from(enteringToolBarEl.querySelectorAll('ion-buttons,[menuToggle]'));\n      const parentHeader = enteringToolBarEl.closest('ion-header');\n      const inactiveHeader = parentHeader && parentHeader.classList.contains('header-collapse-condense-inactive');\n      let buttonsToAnimate;\n\n      if (backDirection) {\n        buttonsToAnimate = buttons.filter(button => {\n          const isCollapseButton = button.classList.contains('buttons-collapse');\n          return isCollapseButton && !inactiveHeader || !isCollapseButton;\n        });\n      } else {\n        buttonsToAnimate = buttons.filter(button => !button.classList.contains('buttons-collapse'));\n      }\n\n      enteringToolBarButtons.addElement(buttonsToAnimate);\n      const enteringToolBarItems = createAnimation();\n      enteringToolBarItems.addElement(enteringToolBarEl.querySelectorAll(':scope > *:not(ion-title):not(ion-buttons):not([menuToggle])'));\n      const enteringToolBarBg = createAnimation();\n      enteringToolBarBg.addElement(shadow(enteringToolBarEl).querySelector('.toolbar-background')); // REVIEW\n\n      const enteringBackButton = createAnimation();\n      const backButtonEl = enteringToolBarEl.querySelector('ion-back-button');\n\n      if (backButtonEl) {\n        enteringBackButton.addElement(backButtonEl);\n      }\n\n      enteringToolBar.addAnimation([enteringTitle, enteringToolBarButtons, enteringToolBarItems, enteringToolBarBg, enteringBackButton]);\n      enteringToolBarButtons.fromTo(OPACITY, 0.01, 1);\n      enteringToolBarItems.fromTo(OPACITY, 0.01, 1);\n\n      if (backDirection) {\n        if (!inactiveHeader) {\n          enteringTitle.fromTo('transform', `translateX(${OFF_LEFT})`, `translateX(${CENTER})`).fromTo(OPACITY, 0.01, 1);\n        }\n\n        enteringToolBarItems.fromTo('transform', `translateX(${OFF_LEFT})`, `translateX(${CENTER})`); // back direction, entering page has a back button\n\n        enteringBackButton.fromTo(OPACITY, 0.01, 1);\n      } else {\n        // entering toolbar, forward direction\n        if (!enteringContentHasLargeTitle) {\n          enteringTitle.fromTo('transform', `translateX(${OFF_RIGHT})`, `translateX(${CENTER})`).fromTo(OPACITY, 0.01, 1);\n        }\n\n        enteringToolBarItems.fromTo('transform', `translateX(${OFF_RIGHT})`, `translateX(${CENTER})`);\n        enteringToolBarBg.beforeClearStyles([OPACITY, 'transform']);\n        const translucentHeader = parentHeader === null || parentHeader === void 0 ? void 0 : parentHeader.translucent;\n\n        if (!translucentHeader) {\n          enteringToolBarBg.fromTo(OPACITY, 0.01, 'var(--opacity)');\n        } else {\n          enteringToolBarBg.fromTo('transform', isRTL ? 'translateX(-100%)' : 'translateX(100%)', 'translateX(0px)');\n        } // forward direction, entering page has a back button\n\n\n        if (!forward) {\n          enteringBackButton.fromTo(OPACITY, 0.01, 1);\n        }\n\n        if (backButtonEl && !forward) {\n          const enteringBackBtnText = createAnimation();\n          enteringBackBtnText.addElement(shadow(backButtonEl).querySelector('.button-text')) // REVIEW\n          .fromTo(`transform`, isRTL ? 'translateX(-100px)' : 'translateX(100px)', 'translateX(0px)');\n          enteringToolBar.addAnimation(enteringBackBtnText);\n        }\n      }\n    }); // setup leaving view\n\n    if (leavingEl) {\n      const leavingContent = createAnimation();\n      const leavingContentEl = leavingEl.querySelector(':scope > ion-content');\n      const leavingToolBarEls = leavingEl.querySelectorAll(':scope > ion-header > ion-toolbar');\n      const leavingHeaderEls = leavingEl.querySelectorAll(':scope > ion-header > *:not(ion-toolbar), :scope > ion-footer > *');\n\n      if (!leavingContentEl && leavingToolBarEls.length === 0 && leavingHeaderEls.length === 0) {\n        leavingContent.addElement(leavingEl.querySelector(':scope > .ion-page, :scope > ion-nav, :scope > ion-tabs')); // REVIEW\n      } else {\n        leavingContent.addElement(leavingContentEl); // REVIEW\n\n        leavingContent.addElement(leavingHeaderEls);\n      }\n\n      rootAnimation.addAnimation(leavingContent);\n\n      if (backDirection) {\n        // leaving content, back direction\n        leavingContent.beforeClearStyles([OPACITY]).fromTo('transform', `translateX(${CENTER})`, isRTL ? 'translateX(-100%)' : 'translateX(100%)');\n        const leavingPage = getIonPageElement(leavingEl);\n        rootAnimation.afterAddWrite(() => {\n          if (rootAnimation.getDirection() === 'normal') {\n            leavingPage.style.setProperty('display', 'none');\n          }\n        });\n      } else {\n        // leaving content, forward direction\n        leavingContent.fromTo('transform', `translateX(${CENTER})`, `translateX(${OFF_LEFT})`).fromTo(OPACITY, 1, OFF_OPACITY);\n      }\n\n      if (leavingContentEl) {\n        const leavingTransitionEffectEl = shadow(leavingContentEl).querySelector('.transition-effect');\n\n        if (leavingTransitionEffectEl) {\n          const leavingTransitionCoverEl = leavingTransitionEffectEl.querySelector('.transition-cover');\n          const leavingTransitionShadowEl = leavingTransitionEffectEl.querySelector('.transition-shadow');\n          const leavingTransitionEffect = createAnimation();\n          const leavingTransitionCover = createAnimation();\n          const leavingTransitionShadow = createAnimation();\n          leavingTransitionEffect.addElement(leavingTransitionEffectEl).beforeStyles({\n            opacity: '1',\n            display: 'block'\n          }).afterStyles({\n            opacity: '',\n            display: ''\n          });\n          leavingTransitionCover.addElement(leavingTransitionCoverEl) // REVIEW\n          .beforeClearStyles([OPACITY]).fromTo(OPACITY, 0.1, 0);\n          leavingTransitionShadow.addElement(leavingTransitionShadowEl) // REVIEW\n          .beforeClearStyles([OPACITY]).fromTo(OPACITY, 0.70, 0.03);\n          leavingTransitionEffect.addAnimation([leavingTransitionCover, leavingTransitionShadow]);\n          leavingContent.addAnimation([leavingTransitionEffect]);\n        }\n      }\n\n      leavingToolBarEls.forEach(leavingToolBarEl => {\n        const leavingToolBar = createAnimation();\n        leavingToolBar.addElement(leavingToolBarEl);\n        const leavingTitle = createAnimation();\n        leavingTitle.addElement(leavingToolBarEl.querySelector('ion-title')); // REVIEW\n\n        const leavingToolBarButtons = createAnimation();\n        const buttons = leavingToolBarEl.querySelectorAll('ion-buttons,[menuToggle]');\n        const parentHeader = leavingToolBarEl.closest('ion-header');\n        const inactiveHeader = parentHeader && parentHeader.classList.contains('header-collapse-condense-inactive');\n        const buttonsToAnimate = Array.from(buttons).filter(button => {\n          const isCollapseButton = button.classList.contains('buttons-collapse');\n          return isCollapseButton && !inactiveHeader || !isCollapseButton;\n        });\n        leavingToolBarButtons.addElement(buttonsToAnimate);\n        const leavingToolBarItems = createAnimation();\n        const leavingToolBarItemEls = leavingToolBarEl.querySelectorAll(':scope > *:not(ion-title):not(ion-buttons):not([menuToggle])');\n\n        if (leavingToolBarItemEls.length > 0) {\n          leavingToolBarItems.addElement(leavingToolBarItemEls);\n        }\n\n        const leavingToolBarBg = createAnimation();\n        leavingToolBarBg.addElement(shadow(leavingToolBarEl).querySelector('.toolbar-background')); // REVIEW\n\n        const leavingBackButton = createAnimation();\n        const backButtonEl = leavingToolBarEl.querySelector('ion-back-button');\n\n        if (backButtonEl) {\n          leavingBackButton.addElement(backButtonEl);\n        }\n\n        leavingToolBar.addAnimation([leavingTitle, leavingToolBarButtons, leavingToolBarItems, leavingBackButton, leavingToolBarBg]);\n        rootAnimation.addAnimation(leavingToolBar); // fade out leaving toolbar items\n\n        leavingBackButton.fromTo(OPACITY, 0.99, 0);\n        leavingToolBarButtons.fromTo(OPACITY, 0.99, 0);\n        leavingToolBarItems.fromTo(OPACITY, 0.99, 0);\n\n        if (backDirection) {\n          if (!inactiveHeader) {\n            // leaving toolbar, back direction\n            leavingTitle.fromTo('transform', `translateX(${CENTER})`, isRTL ? 'translateX(-100%)' : 'translateX(100%)').fromTo(OPACITY, 0.99, 0);\n          }\n\n          leavingToolBarItems.fromTo('transform', `translateX(${CENTER})`, isRTL ? 'translateX(-100%)' : 'translateX(100%)');\n          leavingToolBarBg.beforeClearStyles([OPACITY, 'transform']); // leaving toolbar, back direction, and there's no entering toolbar\n          // should just slide out, no fading out\n\n          const translucentHeader = parentHeader === null || parentHeader === void 0 ? void 0 : parentHeader.translucent;\n\n          if (!translucentHeader) {\n            leavingToolBarBg.fromTo(OPACITY, 'var(--opacity)', 0);\n          } else {\n            leavingToolBarBg.fromTo('transform', 'translateX(0px)', isRTL ? 'translateX(-100%)' : 'translateX(100%)');\n          }\n\n          if (backButtonEl && !backward) {\n            const leavingBackBtnText = createAnimation();\n            leavingBackBtnText.addElement(shadow(backButtonEl).querySelector('.button-text')) // REVIEW\n            .fromTo('transform', `translateX(${CENTER})`, `translateX(${(isRTL ? -124 : 124) + 'px'})`);\n            leavingToolBar.addAnimation(leavingBackBtnText);\n          }\n        } else {\n          // leaving toolbar, forward direction\n          if (!inactiveHeader) {\n            leavingTitle.fromTo('transform', `translateX(${CENTER})`, `translateX(${OFF_LEFT})`).fromTo(OPACITY, 0.99, 0).afterClearStyles([TRANSFORM, OPACITY]);\n          }\n\n          leavingToolBarItems.fromTo('transform', `translateX(${CENTER})`, `translateX(${OFF_LEFT})`).afterClearStyles([TRANSFORM, OPACITY]);\n          leavingBackButton.afterClearStyles([OPACITY]);\n          leavingTitle.afterClearStyles([OPACITY]);\n          leavingToolBarButtons.afterClearStyles([OPACITY]);\n        }\n      });\n    }\n\n    return rootAnimation;\n  } catch (err) {\n    throw err;\n  }\n};\n\nexport { iosTransitionAnimation, shadow };","map":null,"metadata":{},"sourceType":"module"}