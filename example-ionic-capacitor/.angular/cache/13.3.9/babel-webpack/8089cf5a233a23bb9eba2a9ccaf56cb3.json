{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nconst HapticEngine = {\n  getEngine() {\n    const win = window;\n    return win.TapticEngine || win.Capacitor && win.Capacitor.isPluginAvailable('Haptics') && win.Capacitor.Plugins.Haptics;\n  },\n\n  available() {\n    return !!this.getEngine();\n  },\n\n  isCordova() {\n    return !!window.TapticEngine;\n  },\n\n  isCapacitor() {\n    const win = window;\n    return !!win.Capacitor;\n  },\n\n  impact(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.impact({\n      style\n    });\n  },\n\n  notification(options) {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    const style = this.isCapacitor() ? options.style.toUpperCase() : options.style;\n    engine.notification({\n      style\n    });\n  },\n\n  selection() {\n    this.impact({\n      style: 'light'\n    });\n  },\n\n  selectionStart() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionStart();\n    } else {\n      engine.gestureSelectionStart();\n    }\n  },\n\n  selectionChanged() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionChanged();\n    } else {\n      engine.gestureSelectionChanged();\n    }\n  },\n\n  selectionEnd() {\n    const engine = this.getEngine();\n\n    if (!engine) {\n      return;\n    }\n\n    if (this.isCapacitor()) {\n      engine.selectionEnd();\n    } else {\n      engine.gestureSelectionEnd();\n    }\n  }\n\n};\n/**\n * Trigger a selection changed haptic event. Good for one-time events\n * (not for gestures)\n */\n\nconst hapticSelection = () => {\n  HapticEngine.selection();\n};\n/**\n * Tell the haptic engine that a gesture for a selection change is starting.\n */\n\n\nconst hapticSelectionStart = () => {\n  HapticEngine.selectionStart();\n};\n/**\n * Tell the haptic engine that a selection changed during a gesture.\n */\n\n\nconst hapticSelectionChanged = () => {\n  HapticEngine.selectionChanged();\n};\n/**\n * Tell the haptic engine we are done with a gesture. This needs to be\n * called lest resources are not properly recycled.\n */\n\n\nconst hapticSelectionEnd = () => {\n  HapticEngine.selectionEnd();\n};\n/**\n * Use this to indicate success/failure/warning to the user.\n * options should be of the type `{ style: 'light' }` (or `medium`/`heavy`)\n */\n\n\nconst hapticImpact = options => {\n  HapticEngine.impact(options);\n};\n\nexport { hapticSelectionStart as a, hapticSelectionChanged as b, hapticSelection as c, hapticImpact as d, hapticSelectionEnd as h };","map":null,"metadata":{},"sourceType":"module"}