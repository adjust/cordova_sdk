{"ast":null,"code":"import _asyncToGenerator from \"/Users/aditiagrawal/Work/Adjust/cordova_sdk_dev/example-ionic-capacitor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { MENU_BACK_BUTTON_PRIORITY } from './hardware-back-button-ace6a71b.js';\nimport { c as componentOnReady } from './helpers-6e1e5b65.js';\nimport { b as getIonMode } from './ionic-global-0ebe321c.js';\nimport { c as createAnimation } from './animation-19dbf9bf.js';\n/**\n * baseAnimation\n * Base class which is extended by the various types. Each\n * type will provide their own animations for open and close\n * and registers itself with Menu.\n */\n\nconst baseAnimation = isIos => {\n  // https://material.io/guidelines/motion/movement.html#movement-movement-in-out-of-screen-bounds\n  // https://material.io/guidelines/motion/duration-easing.html#duration-easing-natural-easing-curves\n\n  /**\n   * \"Apply the sharp curve to items temporarily leaving the screen that may return\n   * from the same exit point. When they return, use the deceleration curve. On mobile,\n   * this transition typically occurs over 300ms\" -- MD Motion Guide\n   */\n  return createAnimation().duration(isIos ? 400 : 300);\n};\n/**\n * Menu Overlay Type\n * The menu slides over the content. The content\n * itself, which is under the menu, does not move.\n */\n\n\nconst menuOverlayAnimation = menu => {\n  let closedX;\n  let openedX;\n  const width = menu.width + 8;\n  const menuAnimation = createAnimation();\n  const backdropAnimation = createAnimation();\n\n  if (menu.isEndSide) {\n    // right side\n    closedX = width + 'px';\n    openedX = '0px';\n  } else {\n    // left side\n    closedX = -width + 'px';\n    openedX = '0px';\n  }\n\n  menuAnimation.addElement(menu.menuInnerEl).fromTo('transform', `translateX(${closedX})`, `translateX(${openedX})`);\n  const mode = getIonMode(menu);\n  const isIos = mode === 'ios';\n  const opacity = isIos ? 0.2 : 0.25;\n  backdropAnimation.addElement(menu.backdropEl).fromTo('opacity', 0.01, opacity);\n  return baseAnimation(isIos).addAnimation([menuAnimation, backdropAnimation]);\n};\n/**\n * Menu Push Type\n * The content slides over to reveal the menu underneath.\n * The menu itself also slides over to reveal its bad self.\n */\n\n\nconst menuPushAnimation = menu => {\n  let contentOpenedX;\n  let menuClosedX;\n  const mode = getIonMode(menu);\n  const width = menu.width;\n\n  if (menu.isEndSide) {\n    contentOpenedX = -width + 'px';\n    menuClosedX = width + 'px';\n  } else {\n    contentOpenedX = width + 'px';\n    menuClosedX = -width + 'px';\n  }\n\n  const menuAnimation = createAnimation().addElement(menu.menuInnerEl).fromTo('transform', `translateX(${menuClosedX})`, 'translateX(0px)');\n  const contentAnimation = createAnimation().addElement(menu.contentEl).fromTo('transform', 'translateX(0px)', `translateX(${contentOpenedX})`);\n  const backdropAnimation = createAnimation().addElement(menu.backdropEl).fromTo('opacity', 0.01, 0.32);\n  return baseAnimation(mode === 'ios').addAnimation([menuAnimation, contentAnimation, backdropAnimation]);\n};\n/**\n * Menu Reveal Type\n * The content slides over to reveal the menu underneath.\n * The menu itself, which is under the content, does not move.\n */\n\n\nconst menuRevealAnimation = menu => {\n  const mode = getIonMode(menu);\n  const openedX = menu.width * (menu.isEndSide ? -1 : 1) + 'px';\n  const contentOpen = createAnimation().addElement(menu.contentEl) // REVIEW\n  .fromTo('transform', 'translateX(0px)', `translateX(${openedX})`);\n  return baseAnimation(mode === 'ios').addAnimation(contentOpen);\n};\n\nconst createMenuController = () => {\n  const menuAnimations = new Map();\n  const menus = [];\n\n  const open = /*#__PURE__*/function () {\n    var _ref = _asyncToGenerator(function* (menu) {\n      const menuEl = yield get(menu);\n\n      if (menuEl) {\n        return menuEl.open();\n      }\n\n      return false;\n    });\n\n    return function open(_x) {\n      return _ref.apply(this, arguments);\n    };\n  }();\n\n  const close = /*#__PURE__*/function () {\n    var _ref2 = _asyncToGenerator(function* (menu) {\n      const menuEl = yield menu !== undefined ? get(menu) : getOpen();\n\n      if (menuEl !== undefined) {\n        return menuEl.close();\n      }\n\n      return false;\n    });\n\n    return function close(_x2) {\n      return _ref2.apply(this, arguments);\n    };\n  }();\n\n  const toggle = /*#__PURE__*/function () {\n    var _ref3 = _asyncToGenerator(function* (menu) {\n      const menuEl = yield get(menu);\n\n      if (menuEl) {\n        return menuEl.toggle();\n      }\n\n      return false;\n    });\n\n    return function toggle(_x3) {\n      return _ref3.apply(this, arguments);\n    };\n  }();\n\n  const enable = /*#__PURE__*/function () {\n    var _ref4 = _asyncToGenerator(function* (shouldEnable, menu) {\n      const menuEl = yield get(menu);\n\n      if (menuEl) {\n        menuEl.disabled = !shouldEnable;\n      }\n\n      return menuEl;\n    });\n\n    return function enable(_x4, _x5) {\n      return _ref4.apply(this, arguments);\n    };\n  }();\n\n  const swipeGesture = /*#__PURE__*/function () {\n    var _ref5 = _asyncToGenerator(function* (shouldEnable, menu) {\n      const menuEl = yield get(menu);\n\n      if (menuEl) {\n        menuEl.swipeGesture = shouldEnable;\n      }\n\n      return menuEl;\n    });\n\n    return function swipeGesture(_x6, _x7) {\n      return _ref5.apply(this, arguments);\n    };\n  }();\n\n  const isOpen = /*#__PURE__*/function () {\n    var _ref6 = _asyncToGenerator(function* (menu) {\n      if (menu != null) {\n        const menuEl = yield get(menu);\n        return menuEl !== undefined && menuEl.isOpen();\n      } else {\n        const menuEl = yield getOpen();\n        return menuEl !== undefined;\n      }\n    });\n\n    return function isOpen(_x8) {\n      return _ref6.apply(this, arguments);\n    };\n  }();\n\n  const isEnabled = /*#__PURE__*/function () {\n    var _ref7 = _asyncToGenerator(function* (menu) {\n      const menuEl = yield get(menu);\n\n      if (menuEl) {\n        return !menuEl.disabled;\n      }\n\n      return false;\n    });\n\n    return function isEnabled(_x9) {\n      return _ref7.apply(this, arguments);\n    };\n  }();\n\n  const get = /*#__PURE__*/function () {\n    var _ref8 = _asyncToGenerator(function* (menu) {\n      yield waitUntilReady();\n\n      if (menu === 'start' || menu === 'end') {\n        // there could be more than one menu on the same side\n        // so first try to get the enabled one\n        const menuRef = find(m => m.side === menu && !m.disabled);\n\n        if (menuRef) {\n          return menuRef;\n        } // didn't find a menu side that is enabled\n        // so try to get the first menu side found\n\n\n        return find(m => m.side === menu);\n      } else if (menu != null) {\n        // the menuId was not left or right\n        // so try to get the menu by its \"id\"\n        return find(m => m.menuId === menu);\n      } // return the first enabled menu\n\n\n      const menuEl = find(m => !m.disabled);\n\n      if (menuEl) {\n        return menuEl;\n      } // get the first menu in the array, if one exists\n\n\n      return menus.length > 0 ? menus[0].el : undefined;\n    });\n\n    return function get(_x10) {\n      return _ref8.apply(this, arguments);\n    };\n  }();\n  /**\n   * Get the instance of the opened menu. Returns `null` if a menu is not found.\n   */\n\n\n  const getOpen = /*#__PURE__*/function () {\n    var _ref9 = _asyncToGenerator(function* () {\n      yield waitUntilReady();\n      return _getOpenSync();\n    });\n\n    return function getOpen() {\n      return _ref9.apply(this, arguments);\n    };\n  }();\n  /**\n   * Get all menu instances.\n   */\n\n\n  const getMenus = /*#__PURE__*/function () {\n    var _ref10 = _asyncToGenerator(function* () {\n      yield waitUntilReady();\n      return getMenusSync();\n    });\n\n    return function getMenus() {\n      return _ref10.apply(this, arguments);\n    };\n  }();\n  /**\n   * Get whether or not a menu is animating. Returns `true` if any\n   * menu is currently animating.\n   */\n\n\n  const isAnimating = /*#__PURE__*/function () {\n    var _ref11 = _asyncToGenerator(function* () {\n      yield waitUntilReady();\n      return isAnimatingSync();\n    });\n\n    return function isAnimating() {\n      return _ref11.apply(this, arguments);\n    };\n  }();\n\n  const registerAnimation = (name, animation) => {\n    menuAnimations.set(name, animation);\n  };\n\n  const _register = menu => {\n    if (menus.indexOf(menu) < 0) {\n      if (!menu.disabled) {\n        _setActiveMenu(menu);\n      }\n\n      menus.push(menu);\n    }\n  };\n\n  const _unregister = menu => {\n    const index = menus.indexOf(menu);\n\n    if (index > -1) {\n      menus.splice(index, 1);\n    }\n  };\n\n  const _setActiveMenu = menu => {\n    // if this menu should be enabled\n    // then find all the other menus on this same side\n    // and automatically disable other same side menus\n    const side = menu.side;\n    menus.filter(m => m.side === side && m !== menu).forEach(m => m.disabled = true);\n  };\n\n  const _setOpen = /*#__PURE__*/function () {\n    var _ref12 = _asyncToGenerator(function* (menu, shouldOpen, animated) {\n      if (isAnimatingSync()) {\n        return false;\n      }\n\n      if (shouldOpen) {\n        const openedMenu = yield getOpen();\n\n        if (openedMenu && menu.el !== openedMenu) {\n          yield openedMenu.setOpen(false, false);\n        }\n      }\n\n      return menu._setOpen(shouldOpen, animated);\n    });\n\n    return function _setOpen(_x11, _x12, _x13) {\n      return _ref12.apply(this, arguments);\n    };\n  }();\n\n  const _createAnimation = (type, menuCmp) => {\n    const animationBuilder = menuAnimations.get(type);\n\n    if (!animationBuilder) {\n      throw new Error('animation not registered');\n    }\n\n    const animation = animationBuilder(menuCmp);\n    return animation;\n  };\n\n  const _getOpenSync = () => {\n    return find(m => m._isOpen);\n  };\n\n  const getMenusSync = () => {\n    return menus.map(menu => menu.el);\n  };\n\n  const isAnimatingSync = () => {\n    return menus.some(menu => menu.isAnimating);\n  };\n\n  const find = predicate => {\n    const instance = menus.find(predicate);\n\n    if (instance !== undefined) {\n      return instance.el;\n    }\n\n    return undefined;\n  };\n\n  const waitUntilReady = () => {\n    return Promise.all(Array.from(document.querySelectorAll('ion-menu')).map(menu => new Promise(resolve => componentOnReady(menu, resolve))));\n  };\n\n  registerAnimation('reveal', menuRevealAnimation);\n  registerAnimation('push', menuPushAnimation);\n  registerAnimation('overlay', menuOverlayAnimation);\n  /* tslint:disable-next-line */\n\n  if (typeof document !== 'undefined') {\n    document.addEventListener('ionBackButton', ev => {\n      const openMenu = _getOpenSync();\n\n      if (openMenu) {\n        ev.detail.register(MENU_BACK_BUTTON_PRIORITY, () => {\n          return openMenu.close();\n        });\n      }\n    });\n  }\n\n  return {\n    registerAnimation,\n    get,\n    getMenus,\n    getOpen,\n    isEnabled,\n    swipeGesture,\n    isAnimating,\n    isOpen,\n    enable,\n    toggle,\n    close,\n    open,\n    _getOpenSync,\n    _createAnimation,\n    _register,\n    _unregister,\n    _setOpen,\n    _setActiveMenu\n  };\n};\n\nconst menuController = /*@__PURE__*/createMenuController();\nexport { menuController as m };","map":null,"metadata":{},"sourceType":"module"}