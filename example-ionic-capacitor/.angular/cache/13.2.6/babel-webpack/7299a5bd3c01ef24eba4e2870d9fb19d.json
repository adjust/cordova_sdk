{"ast":null,"code":"/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nexport { c as createAnimation } from './animation-19dbf9bf.js';\nexport { iosTransitionAnimation } from './ios.transition-8b6a776a.js';\nexport { mdTransitionAnimation } from './md.transition-da866119.js';\nexport { g as getTimeGivenProgression } from './cubic-bezier-154a53a5.js';\nexport { createGesture } from './index-41bf41f2.js';\nexport { g as getPlatforms, i as initialize, a as isPlatform } from './ionic-global-0ebe321c.js';\nimport { a as addEventListener, r as raf, b as removeEventListener } from './helpers-6e1e5b65.js';\nexport { c as componentOnReady } from './helpers-6e1e5b65.js';\nexport { I as IonicSafeString } from './index-c841c933.js';\nexport { a as LIFECYCLE_DID_ENTER, c as LIFECYCLE_DID_LEAVE, L as LIFECYCLE_WILL_ENTER, b as LIFECYCLE_WILL_LEAVE, d as LIFECYCLE_WILL_UNLOAD } from './index-e6c2c822.js';\nexport { m as menuController } from './index-cdb1cf94.js';\nexport { b as actionSheetController, a as alertController, l as loadingController, m as modalController, p as pickerController, c as popoverController, t as toastController } from './overlays-36d3475d.js';\nimport './gesture-controller-68c023a4.js';\nimport './index-b3eecb14.js';\nimport './hardware-back-button-ace6a71b.js';\n\nconst setupConfig = config => {\n  const win = window;\n  const Ionic = win.Ionic;\n\n  if (Ionic && Ionic.config && Ionic.config.constructor.name !== 'Object') {\n    return;\n  }\n\n  win.Ionic = win.Ionic || {};\n  win.Ionic.config = Object.assign(Object.assign({}, win.Ionic.config), config);\n  return win.Ionic.config;\n};\n\nconst getMode = () => {\n  const win = window;\n  const config = win && win.Ionic && win.Ionic.config;\n\n  if (config) {\n    if (config.mode) {\n      return config.mode;\n    } else {\n      return config.get('mode');\n    }\n  }\n\n  return 'md';\n};\n/**\n * This is a plugin for Swiper that allows it to work\n * with Ionic Framework and the routing integrations.\n * Without this plugin, Swiper would be incapable of correctly\n * determining the dimensions of the slides component as\n * each view is initially hidden before transitioning in.\n */\n\n\nconst setupSwiperInIonic = (swiper, watchForIonPageChanges = true) => {\n  if (typeof window === 'undefined') {\n    return;\n  }\n\n  const swiperEl = swiper.el;\n  const ionPage = swiperEl.closest('.ion-page');\n\n  if (!ionPage) {\n    if (watchForIonPageChanges) {\n      /**\n       * If no ion page found, it is possible\n       * that we are in the overlay setup step\n       * where the inner component has been\n       * created but not attached to the DOM yet.\n       * If so, wait for the .ion-page class to\n       * appear on the root div and re-run setup.\n       */\n      const rootNode = swiperEl.getRootNode();\n\n      if (rootNode.tagName === 'DIV') {\n        const mo = new MutationObserver(m => {\n          const mutation = m[0];\n          const wasEmpty = mutation.oldValue === null;\n          const hasIonPage = rootNode.classList.contains('ion-page');\n          /**\n           * Now that we have an .ion-page class\n           * we can safely attempt setup again.\n           */\n\n          if (wasEmpty && hasIonPage) {\n            mo.disconnect();\n            /**\n             * Set false here so we do not\n             * get infinite loops\n             */\n\n            setupSwiperInIonic(swiper, false);\n          }\n        });\n        mo.observe(rootNode, {\n          attributeFilter: ['class'],\n          attributeOldValue: true\n        });\n      }\n    }\n\n    return;\n  }\n  /**\n   * If using slides in a modal or\n   * popover we need to wait for the\n   * overlay to be shown as these components\n   * are hidden when they are initially created.\n   */\n\n\n  const modalOrPopover = swiperEl.closest('ion-modal, ion-popover');\n\n  if (modalOrPopover) {\n    const eventName = modalOrPopover.tagName === 'ION-MODAL' ? 'ionModalWillPresent' : 'ionPopoverWillPresent';\n\n    const overlayCallback = () => {\n      /**\n       * We need an raf here so the update\n       * is fired one tick after the overlay is shown.\n       */\n      raf(() => {\n        swiperEl.swiper.update();\n        removeEventListener(modalOrPopover, eventName, overlayCallback);\n      });\n    };\n\n    addEventListener(modalOrPopover, eventName, overlayCallback);\n  } else {\n    /**\n     * If using slides in a page\n     * we need to wait for the ion-page-invisible\n     * class to be removed so Swiper can correctly\n     * compute the dimensions of the slides.\n     */\n    const mo = new MutationObserver(m => {\n      var _a;\n\n      const mutation = m[0];\n      const wasPageHidden = (_a = mutation.oldValue) === null || _a === void 0 ? void 0 : _a.includes('ion-page-invisible');\n      const isPageHidden = ionPage.classList.contains('ion-page-invisible');\n      /**\n       * Only update Swiper if the page was\n       * hidden but is no longer hidden.\n       */\n\n      if (!isPageHidden && isPageHidden !== wasPageHidden) {\n        swiperEl.swiper.update();\n      }\n    });\n    mo.observe(ionPage, {\n      attributeFilter: ['class'],\n      attributeOldValue: true\n    });\n  }\n  /**\n   * We also need to listen for the appload event\n   * which is emitted by Stencil in the\n   * event that Swiper is being used on the\n   * view that is rendered initially.\n   */\n\n\n  const onAppLoad = () => {\n    swiperEl.swiper.update();\n    removeEventListener(window, 'appload', onAppLoad);\n  };\n\n  addEventListener(window, 'appload', onAppLoad);\n};\n\nconst IonicSwiper = {\n  name: 'ionic',\n  on: {\n    afterInit(swiper) {\n      console.warn('[Deprecation Warning]: The IonicSwiper module has been deprecated in favor of the IonSlides module. This change was made to better support the Swiper 7 release. The IonicSwiper module will be removed in Ionic 7.0. See https://ionicframework.com/docs/api/slides#migration for revised migration steps.');\n      setupSwiperInIonic(swiper);\n    }\n\n  }\n};\n\nconst IonicSlides = opts => {\n  const {\n    swiper,\n    extendParams\n  } = opts;\n  const slidesParams = {\n    effect: undefined,\n    direction: 'horizontal',\n    initialSlide: 0,\n    loop: false,\n    parallax: false,\n    slidesPerView: 1,\n    spaceBetween: 0,\n    speed: 300,\n    slidesPerColumn: 1,\n    slidesPerColumnFill: 'column',\n    slidesPerGroup: 1,\n    centeredSlides: false,\n    slidesOffsetBefore: 0,\n    slidesOffsetAfter: 0,\n    touchEventsTarget: 'container',\n    autoplay: false,\n    freeMode: false,\n    freeModeMomentum: true,\n    freeModeMomentumRatio: 1,\n    freeModeMomentumBounce: true,\n    freeModeMomentumBounceRatio: 1,\n    freeModeMomentumVelocityRatio: 1,\n    freeModeSticky: false,\n    freeModeMinimumVelocity: 0.02,\n    autoHeight: false,\n    setWrapperSize: false,\n    zoom: {\n      maxRatio: 3,\n      minRatio: 1,\n      toggle: false\n    },\n    touchRatio: 1,\n    touchAngle: 45,\n    simulateTouch: true,\n    touchStartPreventDefault: false,\n    shortSwipes: true,\n    longSwipes: true,\n    longSwipesRatio: 0.5,\n    longSwipesMs: 300,\n    followFinger: true,\n    threshold: 0,\n    touchMoveStopPropagation: true,\n    touchReleaseOnEdges: false,\n    iOSEdgeSwipeDetection: false,\n    iOSEdgeSwipeThreshold: 20,\n    resistance: true,\n    resistanceRatio: 0.85,\n    watchSlidesProgress: false,\n    watchSlidesVisibility: false,\n    preventClicks: true,\n    preventClicksPropagation: true,\n    slideToClickedSlide: false,\n    loopAdditionalSlides: 0,\n    noSwiping: true,\n    runCallbacksOnInit: true,\n    coverflowEffect: {\n      rotate: 50,\n      stretch: 0,\n      depth: 100,\n      modifier: 1,\n      slideShadows: true\n    },\n    flipEffect: {\n      slideShadows: true,\n      limitRotation: true\n    },\n    cubeEffect: {\n      slideShadows: true,\n      shadow: true,\n      shadowOffset: 20,\n      shadowScale: 0.94\n    },\n    fadeEffect: {\n      crossFade: false\n    },\n    a11y: {\n      prevSlideMessage: 'Previous slide',\n      nextSlideMessage: 'Next slide',\n      firstSlideMessage: 'This is the first slide',\n      lastSlideMessage: 'This is the last slide'\n    }\n  };\n\n  if (swiper.pagination) {\n    slidesParams.pagination = {\n      type: 'bullets',\n      clickable: false,\n      hideOnClick: false\n    };\n  }\n\n  if (swiper.scrollbar) {\n    slidesParams.scrollbar = {\n      hide: true\n    };\n  }\n\n  extendParams(slidesParams);\n};\n\nexport { IonicSlides, IonicSwiper, getMode, setupConfig };","map":null,"metadata":{},"sourceType":"module"}