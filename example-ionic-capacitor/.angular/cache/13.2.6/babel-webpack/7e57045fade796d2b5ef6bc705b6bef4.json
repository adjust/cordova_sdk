{"ast":null,"code":"import _asyncToGenerator from \"/Users/aditiagrawal/Work/Adjust/cordova_sdk_dev/example-ionic-capacitor/node_modules/@babel/runtime/helpers/esm/asyncToGenerator.js\";\n\n/*!\n * (C) Ionic http://ionicframework.com - MIT License\n */\nimport { r as registerInstance, f as readTask, c as writeTask, j as forceUpdate, h, H as Host, i as getElement } from './index-b3eecb14.js';\nimport { c as componentOnReady } from './helpers-6e1e5b65.js';\nconst CELL_TYPE_ITEM = 'item';\nconst CELL_TYPE_HEADER = 'header';\nconst CELL_TYPE_FOOTER = 'footer';\nconst NODE_CHANGE_NONE = 0;\nconst NODE_CHANGE_POSITION = 1;\nconst NODE_CHANGE_CELL = 2;\nconst MIN_READS = 2;\n\nconst updateVDom = (dom, heightIndex, cells, range) => {\n  // reset dom\n  for (const node of dom) {\n    node.change = NODE_CHANGE_NONE;\n    node.d = true;\n  } // try to match into exisiting dom\n\n\n  const toMutate = [];\n  const end = range.offset + range.length;\n\n  for (let i = range.offset; i < end; i++) {\n    const cell = cells[i];\n    const node = dom.find(n => n.d && n.cell === cell);\n\n    if (node) {\n      const top = heightIndex[i];\n\n      if (top !== node.top) {\n        node.top = top;\n        node.change = NODE_CHANGE_POSITION;\n      }\n\n      node.d = false;\n    } else {\n      toMutate.push(cell);\n    }\n  } // needs to append\n\n\n  const pool = dom.filter(n => n.d);\n\n  for (const cell of toMutate) {\n    const node = pool.find(n => n.d && n.cell.type === cell.type);\n    const index = cell.i;\n\n    if (node) {\n      node.d = false;\n      node.change = NODE_CHANGE_CELL;\n      node.cell = cell;\n      node.top = heightIndex[index];\n    } else {\n      dom.push({\n        d: false,\n        cell,\n        visible: true,\n        change: NODE_CHANGE_CELL,\n        top: heightIndex[index]\n      });\n    }\n  }\n\n  dom.filter(n => n.d && n.top !== -9999).forEach(n => {\n    n.change = NODE_CHANGE_POSITION;\n    n.top = -9999;\n  });\n};\n\nconst doRender = (el, nodeRender, dom, updateCellHeight) => {\n  const children = Array.from(el.children).filter(n => n.tagName !== 'TEMPLATE');\n  const childrenNu = children.length;\n  let child;\n\n  for (let i = 0; i < dom.length; i++) {\n    const node = dom[i];\n    const cell = node.cell; // the cell change, the content must be updated\n\n    if (node.change === NODE_CHANGE_CELL) {\n      if (i < childrenNu) {\n        child = children[i];\n        nodeRender(child, cell, i);\n      } else {\n        const newChild = createNode(el, cell.type);\n        child = nodeRender(newChild, cell, i) || newChild;\n        child.classList.add('virtual-item');\n        el.appendChild(child);\n      }\n\n      child['$ionCell'] = cell;\n    } else {\n      child = children[i];\n    } // only update position when it changes\n\n\n    if (node.change !== NODE_CHANGE_NONE) {\n      child.style.transform = `translate3d(0,${node.top}px,0)`;\n    } // update visibility\n\n\n    const visible = cell.visible;\n\n    if (node.visible !== visible) {\n      if (visible) {\n        child.classList.remove('virtual-loading');\n      } else {\n        child.classList.add('virtual-loading');\n      }\n\n      node.visible = visible;\n    } // dynamic height\n\n\n    if (cell.reads > 0) {\n      updateCellHeight(cell, child);\n      cell.reads--;\n    }\n  }\n};\n\nconst createNode = (el, type) => {\n  const template = getTemplate(el, type);\n\n  if (template && el.ownerDocument) {\n    return el.ownerDocument.importNode(template.content, true).children[0];\n  }\n\n  return null;\n};\n\nconst getTemplate = (el, type) => {\n  switch (type) {\n    case CELL_TYPE_ITEM:\n      return el.querySelector('template:not([name])');\n\n    case CELL_TYPE_HEADER:\n      return el.querySelector('template[name=header]');\n\n    case CELL_TYPE_FOOTER:\n      return el.querySelector('template[name=footer]');\n  }\n};\n\nconst getViewport = (scrollTop, vierportHeight, margin) => {\n  return {\n    top: Math.max(scrollTop - margin, 0),\n    bottom: scrollTop + vierportHeight + margin\n  };\n};\n\nconst getRange = (heightIndex, viewport, buffer) => {\n  const topPos = viewport.top;\n  const bottomPos = viewport.bottom; // find top index\n\n  let i = 0;\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] > topPos) {\n      break;\n    }\n  }\n\n  const offset = Math.max(i - buffer - 1, 0); // find bottom index\n\n  for (; i < heightIndex.length; i++) {\n    if (heightIndex[i] >= bottomPos) {\n      break;\n    }\n  }\n\n  const end = Math.min(i + buffer, heightIndex.length);\n  const length = end - offset;\n  return {\n    offset,\n    length\n  };\n};\n\nconst getShouldUpdate = (dirtyIndex, currentRange, range) => {\n  const end = range.offset + range.length;\n  return dirtyIndex <= end || currentRange.offset !== range.offset || currentRange.length !== range.length;\n};\n\nconst findCellIndex = (cells, index) => {\n  const max = cells.length > 0 ? cells[cells.length - 1].index : 0;\n\n  if (index === 0) {\n    return 0;\n  } else if (index === max + 1) {\n    return cells.length;\n  } else {\n    return cells.findIndex(c => c.index === index);\n  }\n};\n\nconst inplaceUpdate = (dst, src, offset) => {\n  if (offset === 0 && src.length >= dst.length) {\n    return src;\n  }\n\n  for (let i = 0; i < src.length; i++) {\n    dst[i + offset] = src[i];\n  }\n\n  return dst;\n};\n\nconst calcCells = (items, itemHeight, headerHeight, footerHeight, headerFn, footerFn, approxHeaderHeight, approxFooterHeight, approxItemHeight, j, offset, len) => {\n  const cells = [];\n  const end = len + offset;\n\n  for (let i = offset; i < end; i++) {\n    const item = items[i];\n\n    if (headerFn) {\n      const value = headerFn(item, i, items);\n\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_HEADER,\n          value,\n          index: i,\n          height: headerHeight ? headerHeight(value, i) : approxHeaderHeight,\n          reads: headerHeight ? 0 : MIN_READS,\n          visible: !!headerHeight\n        });\n      }\n    }\n\n    cells.push({\n      i: j++,\n      type: CELL_TYPE_ITEM,\n      value: item,\n      index: i,\n      height: itemHeight ? itemHeight(item, i) : approxItemHeight,\n      reads: itemHeight ? 0 : MIN_READS,\n      visible: !!itemHeight\n    });\n\n    if (footerFn) {\n      const value = footerFn(item, i, items);\n\n      if (value != null) {\n        cells.push({\n          i: j++,\n          type: CELL_TYPE_FOOTER,\n          value,\n          index: i,\n          height: footerHeight ? footerHeight(value, i) : approxFooterHeight,\n          reads: footerHeight ? 0 : MIN_READS,\n          visible: !!footerHeight\n        });\n      }\n    }\n  }\n\n  return cells;\n};\n\nconst calcHeightIndex = (buf, cells, index) => {\n  let acum = buf[index];\n\n  for (let i = index; i < buf.length; i++) {\n    buf[i] = acum;\n    acum += cells[i].height;\n  }\n\n  return acum;\n};\n\nconst resizeBuffer = (buf, len) => {\n  if (!buf) {\n    return new Uint32Array(len);\n  }\n\n  if (buf.length === len) {\n    return buf;\n  } else if (len > buf.length) {\n    const newBuf = new Uint32Array(len);\n    newBuf.set(buf);\n    return newBuf;\n  } else {\n    return buf.subarray(0, len);\n  }\n};\n\nconst positionForIndex = (index, cells, heightIndex) => {\n  const cell = cells.find(c => c.type === CELL_TYPE_ITEM && c.index === index);\n\n  if (cell) {\n    return heightIndex[cell.i];\n  }\n\n  return -1;\n};\n\nconst virtualScrollCss = \"ion-virtual-scroll{display:block;position:relative;width:100%;contain:strict;-webkit-user-select:none;-moz-user-select:none;-ms-user-select:none;user-select:none}ion-virtual-scroll>.virtual-loading{opacity:0}ion-virtual-scroll>.virtual-item{position:absolute !important;top:0 !important;right:0 !important;left:0 !important;-webkit-transition-duration:0ms;transition-duration:0ms;will-change:transform}\";\nconst VirtualScroll = class {\n  constructor(hostRef) {\n    registerInstance(this, hostRef);\n    this.range = {\n      offset: 0,\n      length: 0\n    };\n    this.viewportHeight = 0;\n    this.cells = [];\n    this.virtualDom = [];\n    this.isEnabled = false;\n    this.viewportOffset = 0;\n    this.currentScrollTop = 0;\n    this.indexDirty = 0;\n    this.lastItemLen = 0;\n    this.totalHeight = 0;\n    /**\n     * It is important to provide this\n     * if virtual item height will be significantly larger than the default\n     * The approximate height of each virtual item template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxItemHeight = 45;\n    /**\n     * The approximate height of each header template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxHeaderHeight = 30;\n    /**\n     * The approximate width of each footer template's cell.\n     * This dimension is used to help determine how many cells should\n     * be created when initialized, and to help calculate the height of\n     * the scrollable area. This height value can only use `px` units.\n     * Note that the actual rendered size of each cell comes from the\n     * app's CSS, whereas this approximation is used to help calculate\n     * initial dimensions before the item has been rendered.\n     */\n\n    this.approxFooterHeight = 30;\n\n    this.onScroll = () => {\n      this.updateVirtualScroll();\n    };\n  }\n\n  itemsChanged() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n\n  componentWillLoad() {\n    console.warn(`[Deprecation Warning]: ion-virtual-scroll has been deprecated and will be removed in Ionic Framework v7.0. See https://ionicframework.com/docs/angular/virtual-scroll for migration steps.`);\n  }\n\n  connectedCallback() {\n    var _this = this;\n\n    return _asyncToGenerator(function* () {\n      const contentEl = _this.el.closest('ion-content');\n\n      if (!contentEl) {\n        console.error('<ion-virtual-scroll> must be used inside an <ion-content>');\n        return;\n      }\n\n      _this.scrollEl = yield contentEl.getScrollElement();\n      _this.contentEl = contentEl;\n\n      _this.calcCells();\n\n      _this.updateState();\n    })();\n  }\n\n  componentDidUpdate() {\n    this.updateState();\n  }\n\n  disconnectedCallback() {\n    this.scrollEl = undefined;\n  }\n\n  onResize() {\n    this.calcCells();\n    this.updateVirtualScroll();\n  }\n  /**\n   * Returns the position of the virtual item at the given index.\n   */\n\n\n  positionForItem(index) {\n    return Promise.resolve(positionForIndex(index, this.cells, this.getHeightIndex()));\n  }\n  /**\n   * This method marks a subset of items as dirty, so they can be re-rendered. Items should be marked as\n   * dirty any time the content or their style changes.\n   *\n   * The subset of items to be updated can are specifing by an offset and a length.\n   */\n\n\n  checkRange(offset, len = -1) {\n    var _this2 = this;\n\n    return _asyncToGenerator(function* () {\n      // TODO: kind of hacky how we do in-place updated of the cells\n      // array. this part needs a complete refactor\n      if (!_this2.items) {\n        return;\n      }\n\n      const length = len === -1 ? _this2.items.length - offset : len;\n      const cellIndex = findCellIndex(_this2.cells, offset);\n      const cells = calcCells(_this2.items, _this2.itemHeight, _this2.headerHeight, _this2.footerHeight, _this2.headerFn, _this2.footerFn, _this2.approxHeaderHeight, _this2.approxFooterHeight, _this2.approxItemHeight, cellIndex, offset, length);\n      _this2.cells = inplaceUpdate(_this2.cells, cells, cellIndex);\n      _this2.lastItemLen = _this2.items.length;\n      _this2.indexDirty = Math.max(offset - 1, 0);\n\n      _this2.scheduleUpdate();\n    })();\n  }\n  /**\n   * This method marks the tail the items array as dirty, so they can be re-rendered.\n   *\n   * It's equivalent to calling:\n   *\n   * ```js\n   * virtualScroll.checkRange(lastItemLen);\n   * ```\n   */\n\n\n  checkEnd() {\n    var _this3 = this;\n\n    return _asyncToGenerator(function* () {\n      if (_this3.items) {\n        _this3.checkRange(_this3.lastItemLen);\n      }\n    })();\n  }\n\n  updateVirtualScroll() {\n    // do nothing if virtual-scroll is disabled\n    if (!this.isEnabled || !this.scrollEl) {\n      return;\n    } // unschedule future updates\n\n\n    if (this.timerUpdate) {\n      clearTimeout(this.timerUpdate);\n      this.timerUpdate = undefined;\n    } // schedule DOM operations into the stencil queue\n\n\n    readTask(this.readVS.bind(this));\n    writeTask(this.writeVS.bind(this));\n  }\n\n  readVS() {\n    const {\n      contentEl,\n      scrollEl,\n      el\n    } = this;\n    let topOffset = 0;\n    let node = el;\n\n    while (node && node !== contentEl) {\n      topOffset += node.offsetTop;\n      node = node.offsetParent;\n    }\n\n    this.viewportOffset = topOffset;\n\n    if (scrollEl) {\n      this.viewportHeight = scrollEl.offsetHeight;\n      this.currentScrollTop = scrollEl.scrollTop;\n    }\n  }\n\n  writeVS() {\n    const dirtyIndex = this.indexDirty; // get visible viewport\n\n    const scrollTop = this.currentScrollTop - this.viewportOffset;\n    const viewport = getViewport(scrollTop, this.viewportHeight, 100); // compute lazily the height index\n\n    const heightIndex = this.getHeightIndex(); // get array bounds of visible cells base in the viewport\n\n    const range = getRange(heightIndex, viewport, 2); // fast path, do nothing\n\n    const shouldUpdate = getShouldUpdate(dirtyIndex, this.range, range);\n\n    if (!shouldUpdate) {\n      return;\n    }\n\n    this.range = range; // in place mutation of the virtual DOM\n\n    updateVDom(this.virtualDom, heightIndex, this.cells, range); // Write DOM\n    // Different code paths taken depending of the render API used\n\n    if (this.nodeRender) {\n      doRender(this.el, this.nodeRender, this.virtualDom, this.updateCellHeight.bind(this));\n    } else if (this.domRender) {\n      this.domRender(this.virtualDom);\n    } else if (this.renderItem) {\n      forceUpdate(this);\n    }\n  }\n\n  updateCellHeight(cell, node) {\n    const update = () => {\n      if (node['$ionCell'] === cell) {\n        const style = window.getComputedStyle(node);\n        const height = node.offsetHeight + parseFloat(style.getPropertyValue('margin-bottom'));\n        this.setCellHeight(cell, height);\n      }\n    };\n\n    if (node) {\n      componentOnReady(node, update);\n    } else {\n      update();\n    }\n  }\n\n  setCellHeight(cell, height) {\n    const index = cell.i; // the cell might changed since the height update was scheduled\n\n    if (cell !== this.cells[index]) {\n      return;\n    }\n\n    if (cell.height !== height || cell.visible !== true) {\n      cell.visible = true;\n      cell.height = height;\n      this.indexDirty = Math.min(this.indexDirty, index);\n      this.scheduleUpdate();\n    }\n  }\n\n  scheduleUpdate() {\n    clearTimeout(this.timerUpdate);\n    this.timerUpdate = setTimeout(() => this.updateVirtualScroll(), 100);\n  }\n\n  updateState() {\n    const shouldEnable = !!(this.scrollEl && this.cells);\n\n    if (shouldEnable !== this.isEnabled) {\n      this.enableScrollEvents(shouldEnable);\n\n      if (shouldEnable) {\n        this.updateVirtualScroll();\n      }\n    }\n  }\n\n  calcCells() {\n    if (!this.items) {\n      return;\n    }\n\n    this.lastItemLen = this.items.length;\n    this.cells = calcCells(this.items, this.itemHeight, this.headerHeight, this.footerHeight, this.headerFn, this.footerFn, this.approxHeaderHeight, this.approxFooterHeight, this.approxItemHeight, 0, 0, this.lastItemLen);\n    this.indexDirty = 0;\n  }\n\n  getHeightIndex() {\n    if (this.indexDirty !== Infinity) {\n      this.calcHeightIndex(this.indexDirty);\n    }\n\n    return this.heightIndex;\n  }\n\n  calcHeightIndex(index = 0) {\n    // TODO: optimize, we don't need to calculate all the cells\n    this.heightIndex = resizeBuffer(this.heightIndex, this.cells.length);\n    this.totalHeight = calcHeightIndex(this.heightIndex, this.cells, index);\n    this.indexDirty = Infinity;\n  }\n\n  enableScrollEvents(shouldListen) {\n    if (this.rmEvent) {\n      this.rmEvent();\n      this.rmEvent = undefined;\n    }\n\n    const scrollEl = this.scrollEl;\n\n    if (scrollEl) {\n      this.isEnabled = shouldListen;\n      scrollEl.addEventListener('scroll', this.onScroll);\n\n      this.rmEvent = () => {\n        scrollEl.removeEventListener('scroll', this.onScroll);\n      };\n    }\n  }\n\n  renderVirtualNode(node) {\n    const {\n      type,\n      value,\n      index\n    } = node.cell;\n\n    switch (type) {\n      case CELL_TYPE_ITEM:\n        return this.renderItem(value, index);\n\n      case CELL_TYPE_HEADER:\n        return this.renderHeader(value, index);\n\n      case CELL_TYPE_FOOTER:\n        return this.renderFooter(value, index);\n    }\n  }\n\n  render() {\n    return h(Host, {\n      style: {\n        height: `${this.totalHeight}px`\n      }\n    }, this.renderItem && h(VirtualProxy, {\n      dom: this.virtualDom\n    }, this.virtualDom.map(node => this.renderVirtualNode(node))));\n  }\n\n  get el() {\n    return getElement(this);\n  }\n\n  static get watchers() {\n    return {\n      \"itemHeight\": [\"itemsChanged\"],\n      \"headerHeight\": [\"itemsChanged\"],\n      \"footerHeight\": [\"itemsChanged\"],\n      \"items\": [\"itemsChanged\"]\n    };\n  }\n\n};\n\nconst VirtualProxy = ({\n  dom\n}, children, utils) => {\n  return utils.map(children, (child, i) => {\n    const node = dom[i];\n    const vattrs = child.vattrs || {};\n    let classes = vattrs.class || '';\n    classes += 'virtual-item ';\n\n    if (!node.visible) {\n      classes += 'virtual-loading';\n    }\n\n    return Object.assign(Object.assign({}, child), {\n      vattrs: Object.assign(Object.assign({}, vattrs), {\n        class: classes,\n        style: Object.assign(Object.assign({}, vattrs.style), {\n          transform: `translate3d(0,${node.top}px,0)`\n        })\n      })\n    });\n  });\n};\n\nVirtualScroll.style = virtualScrollCss;\nexport { VirtualScroll as ion_virtual_scroll };","map":null,"metadata":{},"sourceType":"module"}